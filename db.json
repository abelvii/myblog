{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/package.json","path":"lib/three/package.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/yarn.lock","path":"lib/three/yarn.lock","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/._config.yml.swp","hash":"c8b05898e3a4f090c9b5701fae09a292d9a5ca3c","modified":1538016787431},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1538014886797},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1538014886797},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1538014886797},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1538014886797},{"_id":"themes/next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1538014886797},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1538014886797},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1538014886797},{"_id":"themes/next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1538014886797},{"_id":"themes/next/README.md","hash":"140f4ece6670327a7d33b293947d958de80b44da","modified":1538014886797},{"_id":"themes/next/_config.yml","hash":"8c6bbe61a8994e65ad7d93a55f0c058587562e68","modified":1538016787411},{"_id":"themes/next/bower.json","hash":"5391684ba84fe633bc7877ab711a7d8a0072ceda","modified":1538014886798},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1538014886798},{"_id":"themes/next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1538014886799},{"_id":"themes/next/package.json","hash":"9acf6b8c8194f8a366025c8aab64d236908e62a1","modified":1538014886804},{"_id":"source/_posts/Avoidance.md","hash":"6af108765ca1b8e579aed14db3414b6dd99c4dea","modified":1538015191233},{"_id":"source/_posts/data_mining_in_my_eyes.md","hash":"3ef77436d9381c98f98d9f5124a1b2488f6fe29a","modified":1537946601687},{"_id":"source/_posts/first-blog.md","hash":"e9ef0255a3969568e48a37e8fb39edaa3a370e69","modified":1537946601687},{"_id":"source/_posts/hexo&web.md","hash":"4903c06b186fdc5e472c5215a85155f0e7ca63d9","modified":1537946601687},{"_id":"source/_posts/node-route.md","hash":"f55be6f1fba83b648deb6301703d66bdb6da5b81","modified":1537946601688},{"_id":"source/_posts/nodejs-webserver-ii.md","hash":"48adff304edbcb2a717ff8606d764b4e56eb70a8","modified":1537946601688},{"_id":"source/_posts/something-about-tkinter.md","hash":"2f101c976bbc19318c4502ff274d3a169493576c","modified":1537946601688},{"_id":"source/_posts/tkinter-in-my-view.md","hash":"f7f211da25c87150ca3a40c22297cfb96acb6420","modified":1537946601688},{"_id":"source/about/index.md","hash":"05124f882dc46044bffc0a51cfb634489d5aa665","modified":1538014309216},{"_id":"source/categories/index.md","hash":"eea685dce0fd91102fbdd4d35278ee19244edb64","modified":1538014324487},{"_id":"source/tags/index.md","hash":"3d7be3869936e03eb1984948915bb989db800cd0","modified":1538014311142},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1538014886769},{"_id":"themes/next/.git/config","hash":"3aa58ad32c5b537b7b64d00c59cc2787e74a3fd2","modified":1538014886769},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1538014709880},{"_id":"themes/next/.git/packed-refs","hash":"1ddfa36d9f157bd9e4a9be5ca87779fa8c5253e7","modified":1538014886762},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1538014886797},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"a5335a99377069ae76fd993d488bc3eaf48f3a05","modified":1538014886797},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1538014886797},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1538014886797},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1538014886797},{"_id":"themes/next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1538014886797},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1538014886798},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1538014886798},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1538014886798},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1538014886798},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1538014886798},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1538014886798},{"_id":"themes/next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1538014886798},{"_id":"themes/next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1538014886798},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1538014886798},{"_id":"themes/next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1538014886800},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1538014886800},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1538014886800},{"_id":"themes/next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1538014886800},{"_id":"themes/next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1538014886800},{"_id":"themes/next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1538014886800},{"_id":"themes/next/languages/ja.yml","hash":"e331b15b1fda0f2285d25853f834682ab8dc3c39","modified":1538014886800},{"_id":"themes/next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1538014886800},{"_id":"themes/next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1538014886800},{"_id":"themes/next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1538014886800},{"_id":"themes/next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1538014886800},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1538014886800},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1538014886800},{"_id":"themes/next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1538014886800},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1538014886800},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1538014886800},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1538014886800},{"_id":"themes/next/layout/_layout.swig","hash":"1b59036ccb2ad571503b94587f458fad46775642","modified":1538014886800},{"_id":"themes/next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1538014886803},{"_id":"themes/next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1538014886803},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1538014886803},{"_id":"themes/next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1538014886803},{"_id":"themes/next/layout/post.swig","hash":"318249db246a57e9422875a2457c6acfce974ba5","modified":1538014886803},{"_id":"themes/next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1538014886803},{"_id":"themes/next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1538014886803},{"_id":"themes/next/scripts/helpers.js","hash":"a70bfad3efda76738dab12e28e8b75e3989ee3da","modified":1538014886804},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1538014886804},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1538014886804},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1538014886814},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1538014886814},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1538014886815},{"_id":"themes/next/.git/index","hash":"ae1979fedeb55022ad73bd3b8248d825dc011c81","modified":1538014886815},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538014886808},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1538014709903},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1538014709902},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1538014709900},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1538014709899},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1538014709898},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1538014709905},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1538014709896},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1538014709897},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1538014709904},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1538014709914},{"_id":"themes/next/.git/logs/HEAD","hash":"30237ee288d1e45a5cbd2e311bafa2af5554d40e","modified":1538014886769},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1538014886799},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1538014886799},{"_id":"themes/next/docs/ru/README.md","hash":"c54e256ed11a84ee38f755d6f35a3e6e29a91dbc","modified":1538014886799},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1538014886799},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1538014886799},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1538014886799},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bd2c955d9b7b1b45bd74a4536717d547e03fcde3","modified":1538014886799},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1538014886799},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1538014886799},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1538014886799},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1538014886799},{"_id":"themes/next/docs/zh-CN/README.md","hash":"aa6808f4f587c1a97205fa9427ba96a366bcb288","modified":1538014886799},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1538014886799},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1538014886800},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1538014886800},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1538014886800},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1538014886801},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0790ddbc349508d7ece45a9a4391d0a1cd7263cc","modified":1538014886801},{"_id":"themes/next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1538014886801},{"_id":"themes/next/layout/_macro/post.swig","hash":"27922af64ecb9db9a28bcf1c98fb68b26bf0b67a","modified":1538014886801},{"_id":"themes/next/layout/_macro/reward.swig","hash":"bd5778d509c51f4b1d8da3a2bc35462929f08c75","modified":1538014886801},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1f3121ef66a4698fd78f34bf2594ef79a407c92c","modified":1538014886801},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"a9e1346b83cf99e06bed59a53fc069279751e52a","modified":1538014886801},{"_id":"themes/next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1538014886801},{"_id":"themes/next/layout/_partials/comments.swig","hash":"eafff2d623af8991844f34819a60e37ac11ef245","modified":1538014886801},{"_id":"themes/next/layout/_partials/footer.swig","hash":"05cdaf9b6cb32afd442b228cd247aaf9468a31ed","modified":1538014886801},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1538014886801},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1538014886801},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1538014886802},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1538014886802},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1538014886802},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1538014886802},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1538014886802},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1538014886803},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1538014886803},{"_id":"themes/next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1538014886803},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1538014886803},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1538014886803},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1538014886803},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1538014886803},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1538014886803},{"_id":"themes/next/scripts/tags/button.js","hash":"4b12c376bea894d23cca0f9fcb3d6518b6db279d","modified":1538014886804},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1538014886804},{"_id":"themes/next/scripts/tags/exturl.js","hash":"1412ce2ef59fa4137b697a507fd759ff067a2398","modified":1538014886804},{"_id":"themes/next/scripts/tags/full-image.js","hash":"e282bf5a7c70b3d354001e8f66d3bef1a4fbb79e","modified":1538014886804},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"981e01aaf45a1f0f23ce0796d03134f9e437aaca","modified":1538014886804},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1538014886804},{"_id":"themes/next/scripts/tags/label.js","hash":"f0ecd3b5773b19a6bd93a819dfe0c49ee418e4de","modified":1538014886804},{"_id":"themes/next/scripts/tags/note.js","hash":"adb945ba93ac487d46b969ca4e59d3681b8f8d1c","modified":1538014886804},{"_id":"themes/next/scripts/tags/tabs.js","hash":"e37761253d68a29593fe9ed2fe403f49b6e971de","modified":1538014886804},{"_id":"themes/next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1538014886808},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1538014886808},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1538014886808},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1538014886808},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1538014886808},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1538014886808},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1538014886808},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1538014886808},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1538014886808},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1538014886808},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1538014886808},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1538014886808},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1538014886809},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538014886809},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1538014886809},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538014886809},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1538014886809},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1538014886809},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1538014886809},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538014886802},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538014886802},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538014886807},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538014886807},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538014886807},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538014886808},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538014886808},{"_id":"themes/next/.git/refs/heads/master","hash":"a6f9db93547e3dbb806ab56c05ef164fc4f9e94f","modified":1538014886769},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1538014886800},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1538014886800},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1538014886801},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1538014886801},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"00bf33b3c557b8f7e9faf49b226ea6ff7df5cda0","modified":1538014886801},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1538014886801},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1538014886801},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1538014886801},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1538014886801},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1538014886801},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1538014886802},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1538014886802},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1538014886802},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1538014886802},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1538014886802},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1538014886802},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1538014886802},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1538014886802},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"07307f1f0e0e9858f2c7143cbdfcb2a9a92149ab","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c28f3f4aa31d7f996d26a97df6cd7ffa9bfd2cec","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1538014886802},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1538014886802},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1538014886802},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"03ef008bc95e8e83232e5464a6c63d6157d33a5e","modified":1538014886803},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1538014886803},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"03e83f1311faafb7dddc2899042ed1cacd5c995e","modified":1538014886803},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"2c74a96dd314e804d801f8773ac1b2e0a970fce3","modified":1538014886803},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"34421679cae6581697cd3ab7c3729eb220e3e3f5","modified":1538014886803},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1538014886803},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1538014886803},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1538014886803},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1538014886803},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1538014886803},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1538014886803},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1538014886803},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1538014886807},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1538014886807},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1538014886807},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"51c2907e5c50c2614419b670fbdec183ae7f7f5d","modified":1538014886807},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e1f6f59ad6e562dfe640ee4ed5d1ac9b6aba4114","modified":1538014886808},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1538014886808},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c167eeb6b736f7b021fba98c38c2c21032ee1255","modified":1538014886808},{"_id":"themes/next/source/css/_variables/base.styl","hash":"f9b83d0385529e52ce7ba95ed5ed6b3d4e2419bb","modified":1538014886808},{"_id":"themes/next/source/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1538014886809},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1538014886809},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1538014886809},{"_id":"themes/next/source/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1538014886809},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1538014886809},{"_id":"themes/next/source/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1538014886809},{"_id":"themes/next/source/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1538014886809},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1538014886809},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1538014886809},{"_id":"themes/next/source/js/src/utils.js","hash":"e437eff1d3781c4a1aec9ff2060565524a37c983","modified":1538014886809},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1538014886809},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1538014886809},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1538014886809},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1538014886809},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1538014886810},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1538014886814},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1538014886814},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1538014886814},{"_id":"themes/next/.git/objects/pack/pack-8592c1ce388c62aef67adf9cf51776e230a5470f.idx","hash":"8e8265eec683088c23b685afbd699987305e03c3","modified":1538014886736},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1538014886813},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"30237ee288d1e45a5cbd2e311bafa2af5554d40e","modified":1538014886769},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1538014886769},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1538014886803},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1538014886803},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1538014886804},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1538014886804},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1538014886806},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"aebbd86500d819c4532ab290c62b6f432bc2f878","modified":1538014886806},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5ea5affee9797c7d01fdb73a3d8bf383f70b3b05","modified":1538014886806},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1538014886806},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"efc40a32487e0ac7b94b1ca81bdbdcc4ec8f2924","modified":1538014886806},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1538014886807},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1538014886807},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fca5320e2644edcd663888863899d1b80352439b","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"876b5d99061025cf485a3cac440624ded5734319","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1538014886808},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"58f87062210200c778eb92e20a9453bb6a5a03fa","modified":1538014886809},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1538014886810},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1538014886810},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1538014886810},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1538014886813},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1538014886813},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"30237ee288d1e45a5cbd2e311bafa2af5554d40e","modified":1538014886769},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"417f05ff12a2aaca6ceeac8b7e7eb26e9440c4c3","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"549a8a0b5301d32acd86a97f17340cdfcd46fb63","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"578bb2d5f24cad39205bbafb4c39c7e9962b9fa9","modified":1538014886805},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"0ee434f304ffda989de37f42374d3fe5cce8cf29","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"e18b90c97aaff027e795f5a0cb10476a71bf1c3a","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"5e340ee2407a4e39cd708794cfcc718a5f398d7b","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1538014886806},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1c18c91ab3c60169ebe654c80c968fd8458786a3","modified":1538014886806},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1538014886807},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1538014886807},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1538014886812},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1538014886812},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1538014886814},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1538014886811},{"_id":"themes/next/.git/objects/pack/pack-8592c1ce388c62aef67adf9cf51776e230a5470f.pack","hash":"262ab29dd81b36221abbee24bc49a47295b9d77c","modified":1538014886735},{"_id":"public/content.json","hash":"16f80192e0b7185dfe69e148b27b249420f4f746","modified":1538015810716},{"_id":"public/about/index.html","hash":"8c2ac324939bdba8cca13beb77892f756fb5c1a8","modified":1538016794129},{"_id":"public/categories/index.html","hash":"d3a6a573e38822bf3e1fe667e4d22f1c38ff8a4d","modified":1538016794129},{"_id":"public/tags/index.html","hash":"27ea8519cffb25b2f037d84911e8c941a09dea80","modified":1538016794130},{"_id":"public/archives/2017/index.html","hash":"43ca67d5150e5ccabfa0f39b967f4b56d1504928","modified":1538016794130},{"_id":"public/archives/2017/01/index.html","hash":"06101b83070a01d263680d97af5bb87180465fea","modified":1538016794130},{"_id":"public/archives/2017/02/index.html","hash":"b275f1630574f1a42825685beba226e96a624eb9","modified":1538016794130},{"_id":"public/archives/2018/index.html","hash":"b9e364fcffc387f785836d805b27dae55f4fd4b8","modified":1538016794130},{"_id":"public/archives/2018/08/index.html","hash":"2fe49f7d9a98176311b4a8efa7147e7fb5254993","modified":1538016794130},{"_id":"public/categories/杂记/index.html","hash":"1a06d3502f34bc281bc6020e5fa3d8e22d9e74c8","modified":1538016794130},{"_id":"public/categories/技术/index.html","hash":"10229075bedf163bd5e84e646d002fa8f845bdb3","modified":1538016794130},{"_id":"public/tags/科普/index.html","hash":"868432c9f6dcfe74f65b5e90c71b9c1e3ecc8944","modified":1538016794130},{"_id":"public/tags/记录/index.html","hash":"cd9d4e60b693c6712d2c1aed656f9eb9a87932c0","modified":1538016794130},{"_id":"public/tags/数据挖掘/index.html","hash":"f7ed5887121389841dc9a84eea94684cc450506e","modified":1538016794130},{"_id":"public/tags/心情/index.html","hash":"d70d1936e29dddbad7bd8168eefdd7ebfcf32467","modified":1538016794130},{"_id":"public/tags/nodejs/index.html","hash":"13bcd76e5d8a1b164a9b69dcce822f85cf3945fc","modified":1538016794130},{"_id":"public/tags/hexo/index.html","hash":"737b288fb95fd6c3230f6bb9aeb850a2507f5f60","modified":1538016794130},{"_id":"public/tags/Python/index.html","hash":"6a7d76d7d4f22cd3c33ac7517fe940234f2f0b5f","modified":1538016794131},{"_id":"public/tags/tkinter/index.html","hash":"1ad274b22aa40b48c6e9814559b9467b7c988183","modified":1538016794131},{"_id":"public/tags/python/index.html","hash":"9a501859f0c6148231b647eb07bf34bf6af2cb5c","modified":1538016794131},{"_id":"public/tags/gui/index.html","hash":"19f19ff977ade8aca63ad32bb0081d71e1f97b6b","modified":1538016794131},{"_id":"public/2018/08/28/Avoidance/index.html","hash":"2467fb2101d099e9526553b2b406c013236777f8","modified":1538016794131},{"_id":"public/2018/08/22/tkinter-in-my-view/index.html","hash":"a96532ebd991952f4c79fd8436553e1924a89186","modified":1538016794131},{"_id":"public/2018/08/13/something-about-tkinter/index.html","hash":"8d9ecd218a4b5f6bca5acdf8c7152e9b462ca7f6","modified":1538016794131},{"_id":"public/2017/02/14/hexo&web/index.html","hash":"493a5a28e84b39229eb9e92ef0bb5edbb2dbef9e","modified":1538016794131},{"_id":"public/2017/01/26/nodejs-webserver-ii/index.html","hash":"24b9bb025f92dfa1d9fe875bb76ecdf89ff27e63","modified":1538016794131},{"_id":"public/2017/01/23/node-route/index.html","hash":"f256e8630132a3762086dfa27041c281271add7c","modified":1538016794131},{"_id":"public/2017/01/22/data_mining_in_my_eyes/index.html","hash":"f6d248f10383724ea2aeba1be15957f1c983dca6","modified":1538016794131},{"_id":"public/2017/01/21/first-blog/index.html","hash":"15d9bc7cf5258d1b64c2a07481bdc48d45f41140","modified":1538016794131},{"_id":"public/archives/index.html","hash":"755daa061dbca3e6e3bb138c056ff3114a8204a6","modified":1538016794131},{"_id":"public/index.html","hash":"ed7d0c5040babc41ecc08b11dd1a503f931905ec","modified":1538016794131},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1538015810734},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1538015810734},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1538015810734},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1538015810734},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1538015810734},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1538015810734},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1538015810734},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1538015810734},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1538015810734},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1538015810734},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1538015810734},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1538015810734},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538015810734},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1538015810734},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538015810734},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1538015810735},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1538015810735},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1538015810735},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1538015810735},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1538015810735},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1538015811314},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1538015811315},{"_id":"public/js/src/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1538015811319},{"_id":"public/js/src/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1538015811319},{"_id":"public/js/src/bootstrap.js","hash":"1c41508b83cb0c4512e64b4d63afa1be954ce8ef","modified":1538015811319},{"_id":"public/js/src/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1538015811319},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1538015811319},{"_id":"public/js/src/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1538015811319},{"_id":"public/js/src/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1538015811320},{"_id":"public/js/src/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1538015811320},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1538015811320},{"_id":"public/js/src/schemes/pisces.js","hash":"58f87062210200c778eb92e20a9453bb6a5a03fa","modified":1538015811320},{"_id":"public/css/main.css","hash":"244ad62e4821b6c66efbdd4728e8c44f379c4d3a","modified":1538015811320},{"_id":"public/js/src/motion.js","hash":"b45d2c0d48f2c8e6a0621b8063845f76b89476cc","modified":1538015811320},{"_id":"public/js/src/utils.js","hash":"e437eff1d3781c4a1aec9ff2060565524a37c983","modified":1538015811320},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1538015811320},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1538015811321},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1538015811321},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1538015811321},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1538015811322},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1538015811324},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1538015811324},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1538015811325},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1538015811328},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1538015811329},{"_id":"themes/next/source/lib/three/.gitignore","hash":"e691fe9e685cbd50bcd7e138f4ca3503e7b0eaa4","modified":1538016015560},{"_id":"themes/next/source/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1538016015561},{"_id":"themes/next/source/lib/three/README.md","hash":"5096005b6bfa0e554b245c6c1ffe10e7edc8130d","modified":1538016015561},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"97f0e67570574dc8597c5819970508d4e7f7af25","modified":1538016015561},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"333fed4c256c7081e07c7844c097b7970b45b248","modified":1538016015561},{"_id":"themes/next/source/lib/three/gulpfile.js","hash":"edd1868be72fde796b0b1f3a7a0316b3c896962a","modified":1538016015561},{"_id":"themes/next/source/lib/three/package.json","hash":"68c5104de7461d425a5dbe521cea0cf00af289c3","modified":1538016015562},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"704e860183acbaaf8de1be65fe5c958e8105f4bf","modified":1538016015562},{"_id":"themes/next/source/lib/three/yarn.lock","hash":"9c71c0a7c033fc709c1e683157b1f12037024694","modified":1538016015567},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1538016015557},{"_id":"themes/next/source/lib/three/.git/config","hash":"250a00782b562964ece19407742221ae24e56aac","modified":1538016015557},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/index","hash":"831b641e5317e0bb1f619561789274e47529e9c5","modified":1538016015567},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"248e2ce649e1edbe56c6b245d9f17770473aa0d6","modified":1538016015533},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1538016015562},{"_id":"themes/next/source/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1538016015562},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1538016015562},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1538016015562},{"_id":"themes/next/source/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1538016015562},{"_id":"themes/next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1538016011541},{"_id":"themes/next/source/lib/three/.git/logs/HEAD","hash":"0589a90922af5611ad22d348b31bebb57683a79a","modified":1538016015557},{"_id":"themes/next/source/lib/three/.git/objects/03/c40a4b50e21c63a0e27b1fbcd014168ae3f6da","hash":"987ca2a1169e875a5ac73e8a1a906b9ae88d4d22","modified":1538016013759},{"_id":"themes/next/source/lib/three/.git/objects/03/eb19e6b3194a820c462bc63177b6fc2bda245f","hash":"0be88820832fa6ea30d56905e98b27798805dc92","modified":1538016013980},{"_id":"themes/next/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1538016015530},{"_id":"themes/next/source/lib/three/.git/objects/0b/de10292fcd5dd4b66d1bf60f62ea7d7a30b310","hash":"37710386189fe435ea20541a69c1a9b833b5f50b","modified":1538016013980},{"_id":"themes/next/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1538016013756},{"_id":"themes/next/source/lib/three/.git/objects/1f/0b95a965630f47a7264fe9e9456ed7da36c2aa","hash":"6e98b6d7740bf53074339ce383089320fe1962b9","modified":1538016013757},{"_id":"themes/next/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1538016015530},{"_id":"themes/next/source/lib/three/.git/objects/29/4f11136ee13277ee96ec3bb56d810f43655298","hash":"a294c3770aa5e7ed386075202f5b88048e1d170d","modified":1538016015530},{"_id":"themes/next/source/lib/three/.git/objects/36/3db3ce197d25b8c64db663aa9000a181511461","hash":"f87bc2ce87e37d0ee60eceef8be89dae4c52e01d","modified":1538016013762},{"_id":"themes/next/source/lib/three/.git/objects/3a/4c8581b3aa0d4f9192de158bd4223a90d646b5","hash":"a64efe9f8e2db0ff3cfb7b5e71fedf229ce290fd","modified":1538016013757},{"_id":"themes/next/source/lib/three/.git/objects/3a/cef7449b991ee78bb5b7f2f121996b9ec9bba4","hash":"d9165d5939be17750b9edad5d0fc32029e4a23d6","modified":1538016013980},{"_id":"themes/next/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1538016015526},{"_id":"themes/next/source/lib/three/.git/objects/3f/f2616b188ab71e1abf2029d7d55834c5643fc5","hash":"65bbc360ee3cc66fba71b9fb0baa3cff744327b9","modified":1538016013760},{"_id":"themes/next/source/lib/three/.git/objects/52/71f18c203d24b27ec7bd977c2d5c61300cea1a","hash":"cdae53ba376df246585a2f44a86d0c7da98bca1f","modified":1538016015524},{"_id":"themes/next/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1538016015523},{"_id":"themes/next/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1538016013757},{"_id":"themes/next/source/lib/three/.git/objects/6b/128053933889f264c239abe0d381523daa8fa5","hash":"23df1e6daed83528bc2f36980678ecc31e17f09e","modified":1538016013976},{"_id":"themes/next/source/lib/three/.git/objects/6e/a4473e91dc2dbc452ff446e7cb04cb2ff16da0","hash":"710066cce498e372a932ff272d3d0eb4345fe3cf","modified":1538016013755},{"_id":"themes/next/source/lib/three/.git/objects/70/0960a662785b70b5c72909810794e1c18e9891","hash":"ea3c3330dd0a213a3cebdc42ee57d43fb8f9813c","modified":1538016015346},{"_id":"themes/next/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1538016013757},{"_id":"themes/next/source/lib/three/.git/objects/7d/d7c1e8f79dc9a9a99e290147528d7a47d46830","hash":"c2104c89bcf686b243061b456ddc86d916b84360","modified":1538016013981},{"_id":"themes/next/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1538016013756},{"_id":"themes/next/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1538016015522},{"_id":"themes/next/source/lib/three/.git/objects/87/782e1008d1f88a9cb63d59407b1cb9e47b0861","hash":"0af5c5e17b27d8114fddd53d7cae8bb3284ae9af","modified":1538016013756},{"_id":"themes/next/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1538016015530},{"_id":"themes/next/source/lib/three/.git/objects/8a/2159d7a0c70d394071e8dcc79502d5cd1fc5e4","hash":"58ff19b7a9a65c9e562b9e1c7ee0ed3ac005b15d","modified":1538016015528},{"_id":"themes/next/source/lib/three/.git/objects/8e/3ea1a067348d2a9c066fbf201663b462a3ed6c","hash":"f3168176590ac08570ef75b73ecae2b4a455d753","modified":1538016013762},{"_id":"themes/next/source/lib/three/.git/objects/a4/6866ca175f7c27daaf6b39c94d930bc27d4ce5","hash":"fc416f7f3f62c338bda28bb56bfa6f8fb49421ff","modified":1538016015346},{"_id":"themes/next/source/lib/three/.git/objects/ae/8fa980e909988af2ebd9423658213d2e7e6bba","hash":"9978e4f223de97e23a047986bf21cbf48663a150","modified":1538016013756},{"_id":"themes/next/source/lib/three/.git/objects/b0/2d36d33210bc68d3e6451c663eb567ebc5721c","hash":"8d3bac2fa021a8f4609a134167edb84fd46254b2","modified":1538016013761},{"_id":"themes/next/source/lib/three/.git/objects/ce/175226253f7f31da632b93ab6560debab1bf6d","hash":"55c41b0948cb31fad3a52ab7ac91ba93e6c22751","modified":1538016013756},{"_id":"themes/next/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1538016015530},{"_id":"themes/next/source/lib/three/.git/objects/d2/a00ca1067b93b81dae8ea7d0c9838e935595e8","hash":"4b1ecd5271cdf94c10c2e413c7378adb22e940bb","modified":1538016015529},{"_id":"themes/next/source/lib/three/.git/objects/d8/8d5765694f92039daac0f944405d4cf61a0d13","hash":"70d2b236fcd955aa4fa95efc2e18c98919003ec6","modified":1538016013757},{"_id":"themes/next/source/lib/three/.git/objects/d9/0026fb76d55bba50ee4a221c887a0f1a8e8102","hash":"ac0ac5756be4b24f2249be101665ff29ed93d1f9","modified":1538016015527},{"_id":"themes/next/source/lib/three/.git/objects/d9/90e2654ec49768cd50d630db99ee00bee2b13c","hash":"6c5cc041391cb5a6b3e0f2f15f30bd62735ac7fa","modified":1538016013980},{"_id":"themes/next/source/lib/three/.git/objects/df/932438893faefc6b9f5ba9191913dfeedc2a1c","hash":"ac939ae39ab04abc99c0caaef00849585ff4886d","modified":1538016015530},{"_id":"themes/next/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1538016013756},{"_id":"themes/next/source/lib/three/.git/objects/e0/ced7e71c43a729f9653b1c4434b95724fc02ed","hash":"98c61b57d8e5e03cf30d402cfcb840c6e610aaa6","modified":1538016015525},{"_id":"themes/next/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1538016015530},{"_id":"themes/next/source/lib/three/.git/objects/ea/7a1bbd08eb930b5f777ec025493ae0c8cb12d4","hash":"3c428fd65f982afbabbf683163bcc88a4eb4cda0","modified":1538016013756},{"_id":"themes/next/source/lib/three/.git/objects/ec/00e107b97a0b7a9850219894bf4e533c68bf87","hash":"5b7f94788c3c19c8a0f73f1b712d5d79e0236668","modified":1538016013980},{"_id":"themes/next/source/lib/three/.git/objects/fe/47fa8f2d9edef52a8ea859537c9286363ee168","hash":"dfaa57c592a229b220a7241bbd0567ec38f4e578","modified":1538016013761},{"_id":"themes/next/source/lib/three/.git/refs/heads/master","hash":"e1896f18b5735a495e320e3f94266dadbc121db6","modified":1538016015557},{"_id":"themes/next/source/lib/three/.git/logs/refs/heads/master","hash":"0589a90922af5611ad22d348b31bebb57683a79a","modified":1538016015557},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1538016015557},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1538016015566},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"0589a90922af5611ad22d348b31bebb57683a79a","modified":1538016015557},{"_id":"themes/next/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1538016015316},{"_id":"public/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1538016022768},{"_id":"public/lib/three/yarn.lock","hash":"9c71c0a7c033fc709c1e683157b1f12037024694","modified":1538016022768},{"_id":"public/lib/three/README.html","hash":"b9ead5e5ec2847bc3ae33c34e5d1a2c39dd747e9","modified":1538016022786},{"_id":"public/lib/three/gulpfile.js","hash":"edd1868be72fde796b0b1f3a7a0316b3c896962a","modified":1538016022786},{"_id":"public/lib/three/package.json","hash":"d64e9f4ce441b50e48aa0993e190481223665989","modified":1538016022786},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1538016022786},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1538016022786},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1538016022786},{"_id":"public/lib/three/canvas_lines.min.js","hash":"97f0e67570574dc8597c5819970508d4e7f7af25","modified":1538016022787},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"333fed4c256c7081e07c7844c097b7970b45b248","modified":1538016022787},{"_id":"public/lib/three/three-waves.min.js","hash":"704e860183acbaaf8de1be65fe5c958e8105f4bf","modified":1538016022787},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1538016022787},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1538016022789},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1538016022792}],"Category":[{"name":"杂记","_id":"cjmjywgu000041l3h9mplmcrj"},{"name":"技术","_id":"cjmjywgu7000a1l3hmqti2i5o"}],"Data":[],"Page":[{"title":"about","date":"2018-09-27T02:11:12.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-27 10:11:12\ntype: 'about'\n---\n","updated":"2018-09-27T02:11:49.216Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjmjywgtr00011l3h8hyzpyi6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-08-20T08:38:44.000Z","type":"catrgories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-08-20 16:38:44\ntype: 'catrgories'\n---\n","updated":"2018-09-27T02:12:04.487Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjmjywgtu00031l3hb2kzfvw0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-08-23T08:42:48.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-08-23 16:42:48\ntype: 'tags'\n---\n","updated":"2018-09-27T02:11:51.142Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjmjywgu400071l3hziunyt6e","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"回避型依恋","date":"2018-08-28T11:29:54.000Z","_content":"\n他们总要把爱情变成一件很纠结的事？\n\n<!--more-->\n\n心理学家认为，问题的关键在于“回避型依恋”\n\n英国作家阿兰德波顿（ Alain de Botton）讲过一个故事。有个叫马克斯的演员，非常努力地争取加入一个喜剧团。但是等真的应聘成功后，马克斯却很快辞职了，他的辞职信上写着:“我不想加入任何一个会录用我的俱乐部！“意思是，我这么矬，你们还录用我，说明你们水平低，不值得我加入。德波顿认为，在爱情中，很多人也是类似的心态:爱情得到回报的可能性越渺茫，渴望爱情的欲望就越旺盛；可当爱情真的来了，他们又避之唯恐不及，颇有点“叶公好龙”之意。\n\n你可能会觉得，这就是典型的心口不一嘛，一开始根本就没那么爱对方。其实，事情没那么简单，这里面有好几层推理，我们来还原一下:\n\n1.如果你喜欢我，那你一定是被我的假象欺骗了，如果看到了真实的我，你肯定就不会喜欢我。\n\n2.退一步说，你看到了真实的我，却还是喜欢，那就说明你的品位很差劲。这时，你也就不值得我喜欢了。不管你喜不喜欢我，总之我们不适合在一起。\n\n这个推论简直无懈可击，让人想起古龙小说里的胡铁花，只要他喜欢的姑娘一喜欢他，他就立马不喜欢这个姑娘了。英文里有个词专门形容这类人，叫 Lithromantic也就是“单向恋爱者”。在心理上，他们总是会回避别人的爱，甚至只喜欢爱别人，讨厌被人爱。那么，这种心态是怎样形成的？\n\n在回答“爱从哪里来”“人为什么会感受到爱以及“感受爱有哪些不同方式”时，心理学家提出了很多种假设。其中最著名的就是依恋理论（ Attachment Theory）。该理论认为，我们对于爱的感知能力，与我们在婴儿时期的成长经历密切相关。而所谓回避型人格”，则是依恋理论下的一种人格分类，它是使我们无法建立健康稳定的亲密关系的罪魁祸首。最早提出依恋理论的，是英国精神分析学家约翰·鲍尔比（ John Bowlby）。他有一句名言:“人类从摇篮到坟墓，都会有依恋行为。”鲍尔比发现，哪怕是不会说话的婴儿，也会对父母表达情感上的联系。比如说，小宝宝会黏人，会用哭泣、纠缠、尖叫等行为来表达不满，甚至会用拒绝喝奶的方式抗议父母回家太晚。\n","source":"_posts/Avoidance.md","raw":"---\ntitle: 回避型依恋\ndate: 2018-08-28 19:29:54\ncategories: ['杂记']\ntags: ['科普', '记录']\n---\n\n他们总要把爱情变成一件很纠结的事？\n\n<!--more-->\n\n心理学家认为，问题的关键在于“回避型依恋”\n\n英国作家阿兰德波顿（ Alain de Botton）讲过一个故事。有个叫马克斯的演员，非常努力地争取加入一个喜剧团。但是等真的应聘成功后，马克斯却很快辞职了，他的辞职信上写着:“我不想加入任何一个会录用我的俱乐部！“意思是，我这么矬，你们还录用我，说明你们水平低，不值得我加入。德波顿认为，在爱情中，很多人也是类似的心态:爱情得到回报的可能性越渺茫，渴望爱情的欲望就越旺盛；可当爱情真的来了，他们又避之唯恐不及，颇有点“叶公好龙”之意。\n\n你可能会觉得，这就是典型的心口不一嘛，一开始根本就没那么爱对方。其实，事情没那么简单，这里面有好几层推理，我们来还原一下:\n\n1.如果你喜欢我，那你一定是被我的假象欺骗了，如果看到了真实的我，你肯定就不会喜欢我。\n\n2.退一步说，你看到了真实的我，却还是喜欢，那就说明你的品位很差劲。这时，你也就不值得我喜欢了。不管你喜不喜欢我，总之我们不适合在一起。\n\n这个推论简直无懈可击，让人想起古龙小说里的胡铁花，只要他喜欢的姑娘一喜欢他，他就立马不喜欢这个姑娘了。英文里有个词专门形容这类人，叫 Lithromantic也就是“单向恋爱者”。在心理上，他们总是会回避别人的爱，甚至只喜欢爱别人，讨厌被人爱。那么，这种心态是怎样形成的？\n\n在回答“爱从哪里来”“人为什么会感受到爱以及“感受爱有哪些不同方式”时，心理学家提出了很多种假设。其中最著名的就是依恋理论（ Attachment Theory）。该理论认为，我们对于爱的感知能力，与我们在婴儿时期的成长经历密切相关。而所谓回避型人格”，则是依恋理论下的一种人格分类，它是使我们无法建立健康稳定的亲密关系的罪魁祸首。最早提出依恋理论的，是英国精神分析学家约翰·鲍尔比（ John Bowlby）。他有一句名言:“人类从摇篮到坟墓，都会有依恋行为。”鲍尔比发现，哪怕是不会说话的婴儿，也会对父母表达情感上的联系。比如说，小宝宝会黏人，会用哭泣、纠缠、尖叫等行为来表达不满，甚至会用拒绝喝奶的方式抗议父母回家太晚。\n","slug":"Avoidance","published":1,"updated":"2018-09-27T02:26:31.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmjywgtl00001l3hj47imp6f","content":"<p>他们总要把爱情变成一件很纠结的事？</p>\n<a id=\"more\"></a>\n<p>心理学家认为，问题的关键在于“回避型依恋”</p>\n<p>英国作家阿兰德波顿（ Alain de Botton）讲过一个故事。有个叫马克斯的演员，非常努力地争取加入一个喜剧团。但是等真的应聘成功后，马克斯却很快辞职了，他的辞职信上写着:“我不想加入任何一个会录用我的俱乐部！“意思是，我这么矬，你们还录用我，说明你们水平低，不值得我加入。德波顿认为，在爱情中，很多人也是类似的心态:爱情得到回报的可能性越渺茫，渴望爱情的欲望就越旺盛；可当爱情真的来了，他们又避之唯恐不及，颇有点“叶公好龙”之意。</p>\n<p>你可能会觉得，这就是典型的心口不一嘛，一开始根本就没那么爱对方。其实，事情没那么简单，这里面有好几层推理，我们来还原一下:</p>\n<p>1.如果你喜欢我，那你一定是被我的假象欺骗了，如果看到了真实的我，你肯定就不会喜欢我。</p>\n<p>2.退一步说，你看到了真实的我，却还是喜欢，那就说明你的品位很差劲。这时，你也就不值得我喜欢了。不管你喜不喜欢我，总之我们不适合在一起。</p>\n<p>这个推论简直无懈可击，让人想起古龙小说里的胡铁花，只要他喜欢的姑娘一喜欢他，他就立马不喜欢这个姑娘了。英文里有个词专门形容这类人，叫 Lithromantic也就是“单向恋爱者”。在心理上，他们总是会回避别人的爱，甚至只喜欢爱别人，讨厌被人爱。那么，这种心态是怎样形成的？</p>\n<p>在回答“爱从哪里来”“人为什么会感受到爱以及“感受爱有哪些不同方式”时，心理学家提出了很多种假设。其中最著名的就是依恋理论（ Attachment Theory）。该理论认为，我们对于爱的感知能力，与我们在婴儿时期的成长经历密切相关。而所谓回避型人格”，则是依恋理论下的一种人格分类，它是使我们无法建立健康稳定的亲密关系的罪魁祸首。最早提出依恋理论的，是英国精神分析学家约翰·鲍尔比（ John Bowlby）。他有一句名言:“人类从摇篮到坟墓，都会有依恋行为。”鲍尔比发现，哪怕是不会说话的婴儿，也会对父母表达情感上的联系。比如说，小宝宝会黏人，会用哭泣、纠缠、尖叫等行为来表达不满，甚至会用拒绝喝奶的方式抗议父母回家太晚。</p>\n","site":{"data":{}},"excerpt":"<p>他们总要把爱情变成一件很纠结的事？</p>","more":"<p>心理学家认为，问题的关键在于“回避型依恋”</p>\n<p>英国作家阿兰德波顿（ Alain de Botton）讲过一个故事。有个叫马克斯的演员，非常努力地争取加入一个喜剧团。但是等真的应聘成功后，马克斯却很快辞职了，他的辞职信上写着:“我不想加入任何一个会录用我的俱乐部！“意思是，我这么矬，你们还录用我，说明你们水平低，不值得我加入。德波顿认为，在爱情中，很多人也是类似的心态:爱情得到回报的可能性越渺茫，渴望爱情的欲望就越旺盛；可当爱情真的来了，他们又避之唯恐不及，颇有点“叶公好龙”之意。</p>\n<p>你可能会觉得，这就是典型的心口不一嘛，一开始根本就没那么爱对方。其实，事情没那么简单，这里面有好几层推理，我们来还原一下:</p>\n<p>1.如果你喜欢我，那你一定是被我的假象欺骗了，如果看到了真实的我，你肯定就不会喜欢我。</p>\n<p>2.退一步说，你看到了真实的我，却还是喜欢，那就说明你的品位很差劲。这时，你也就不值得我喜欢了。不管你喜不喜欢我，总之我们不适合在一起。</p>\n<p>这个推论简直无懈可击，让人想起古龙小说里的胡铁花，只要他喜欢的姑娘一喜欢他，他就立马不喜欢这个姑娘了。英文里有个词专门形容这类人，叫 Lithromantic也就是“单向恋爱者”。在心理上，他们总是会回避别人的爱，甚至只喜欢爱别人，讨厌被人爱。那么，这种心态是怎样形成的？</p>\n<p>在回答“爱从哪里来”“人为什么会感受到爱以及“感受爱有哪些不同方式”时，心理学家提出了很多种假设。其中最著名的就是依恋理论（ Attachment Theory）。该理论认为，我们对于爱的感知能力，与我们在婴儿时期的成长经历密切相关。而所谓回避型人格”，则是依恋理论下的一种人格分类，它是使我们无法建立健康稳定的亲密关系的罪魁祸首。最早提出依恋理论的，是英国精神分析学家约翰·鲍尔比（ John Bowlby）。他有一句名言:“人类从摇篮到坟墓，都会有依恋行为。”鲍尔比发现，哪怕是不会说话的婴儿，也会对父母表达情感上的联系。比如说，小宝宝会黏人，会用哭泣、纠缠、尖叫等行为来表达不满，甚至会用拒绝喝奶的方式抗议父母回家太晚。</p>"},{"title":"我眼中的数据挖掘","date":"2017-01-22T02:55:52.000Z","_content":"\n\n在16年的12月份我接触到的数据挖掘，也就是上个月，在很久很久以前就已经听说过这方面的东西，也一直都很想要学习一下数据挖掘这门技术，正巧上个月学校有一个数据挖掘的兴趣小组。故事就从这里开始了。。。\n\n<!-- more-->\n\n### 整体的流程\n\n虽然我现在连一个完整的项目都还没有做过，但是我就是想要写一下，用百度去搜数据挖掘的相关资料时，上面都是一些非常深奥的东西，对于像我这种新手不是十分友好，所以我就想要来写一些大概的流程，如果有大神发现有错误的话欢迎来指正。\n\n总体的流程一共有几步\n\n```flow\n取得数据->样本划分->特征提取->合并为数据集->训练模型->选取最优模型->end\n```\n\n### 取得数据\n\n这个感觉没什么说的，如果是比赛的话就直接下载就行了，如果是做项目就在数据库里面去提就行了。\n\n### 样本划分\n\n在学习的时候就因为对这个概念的理解不正确以及对整体流程掌握的不正确而走了许多弯路。\n\n数据集有三个，分别是训练集，验证集以及测试集。三个数据集的基本形式应该是相同的，只是在过程中的作用不同而名字也不同。顾名思义，训练集的作用就是训练模型，验证集的作用就是验证模型预测的准确度，测试集就是放在线上进行测试的数据集。\n\n### 特征提取\n\n特征提取是根据划分之后的样本通过改变不同的特征提取的规则进行样本的特征的提取的工作。特征就是对样本的描述，作用就是将特征与样本数据合并进行模型的训练。\n\n为什么要进行特征的提取？\n\n这个问题我有想过，通过了解人工神经网络有了一些认识。\n\n个人理解来说，训练出来的模型更像是一个数学公式，也就是我们大家都很熟悉的n元一次方程。\n\n### 简单了解神经网络\n\n通过阅读吴军博士的《数学之美》（第二版），非常浅显的了解了一些神经网络。\n\n训练模型的过程个人觉得和神经网络应该有一些联系，神经网络如图：\n\n![neural network](/img/20170122_1.jpg)\n\n神经网络分为几部分：输入端，神经元，输出端。\n\n输入端就是key，神经元就是特征以及其所占权值，训练集中输出端就是标签，测试集中输出端就是结果了。\n\n训练模型就是通过神经网络去分析各个特征所占的权值。最后进行一次函数变换就可以确定输出的结果了。\n\n---\n\n个人对于数据挖掘的理解暂时只有这些，感谢阅读。\n\ncheers！","source":"_posts/data_mining_in_my_eyes.md","raw":"---\ntitle: 我眼中的数据挖掘\ndate: 2017-01-22 10:55:52\ncategories: 技术\ntags: 数据挖掘\n---\n\n\n在16年的12月份我接触到的数据挖掘，也就是上个月，在很久很久以前就已经听说过这方面的东西，也一直都很想要学习一下数据挖掘这门技术，正巧上个月学校有一个数据挖掘的兴趣小组。故事就从这里开始了。。。\n\n<!-- more-->\n\n### 整体的流程\n\n虽然我现在连一个完整的项目都还没有做过，但是我就是想要写一下，用百度去搜数据挖掘的相关资料时，上面都是一些非常深奥的东西，对于像我这种新手不是十分友好，所以我就想要来写一些大概的流程，如果有大神发现有错误的话欢迎来指正。\n\n总体的流程一共有几步\n\n```flow\n取得数据->样本划分->特征提取->合并为数据集->训练模型->选取最优模型->end\n```\n\n### 取得数据\n\n这个感觉没什么说的，如果是比赛的话就直接下载就行了，如果是做项目就在数据库里面去提就行了。\n\n### 样本划分\n\n在学习的时候就因为对这个概念的理解不正确以及对整体流程掌握的不正确而走了许多弯路。\n\n数据集有三个，分别是训练集，验证集以及测试集。三个数据集的基本形式应该是相同的，只是在过程中的作用不同而名字也不同。顾名思义，训练集的作用就是训练模型，验证集的作用就是验证模型预测的准确度，测试集就是放在线上进行测试的数据集。\n\n### 特征提取\n\n特征提取是根据划分之后的样本通过改变不同的特征提取的规则进行样本的特征的提取的工作。特征就是对样本的描述，作用就是将特征与样本数据合并进行模型的训练。\n\n为什么要进行特征的提取？\n\n这个问题我有想过，通过了解人工神经网络有了一些认识。\n\n个人理解来说，训练出来的模型更像是一个数学公式，也就是我们大家都很熟悉的n元一次方程。\n\n### 简单了解神经网络\n\n通过阅读吴军博士的《数学之美》（第二版），非常浅显的了解了一些神经网络。\n\n训练模型的过程个人觉得和神经网络应该有一些联系，神经网络如图：\n\n![neural network](/img/20170122_1.jpg)\n\n神经网络分为几部分：输入端，神经元，输出端。\n\n输入端就是key，神经元就是特征以及其所占权值，训练集中输出端就是标签，测试集中输出端就是结果了。\n\n训练模型就是通过神经网络去分析各个特征所占的权值。最后进行一次函数变换就可以确定输出的结果了。\n\n---\n\n个人对于数据挖掘的理解暂时只有这些，感谢阅读。\n\ncheers！","slug":"data_mining_in_my_eyes","published":1,"updated":"2018-09-26T07:23:21.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmjywgts00021l3hksc9q49o","content":"<p>在16年的12月份我接触到的数据挖掘，也就是上个月，在很久很久以前就已经听说过这方面的东西，也一直都很想要学习一下数据挖掘这门技术，正巧上个月学校有一个数据挖掘的兴趣小组。故事就从这里开始了。。。</p>\n<a id=\"more\"></a>\n<h3 id=\"整体的流程\"><a href=\"#整体的流程\" class=\"headerlink\" title=\"整体的流程\"></a>整体的流程</h3><p>虽然我现在连一个完整的项目都还没有做过，但是我就是想要写一下，用百度去搜数据挖掘的相关资料时，上面都是一些非常深奥的东西，对于像我这种新手不是十分友好，所以我就想要来写一些大概的流程，如果有大神发现有错误的话欢迎来指正。</p>\n<p>总体的流程一共有几步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">取得数据-&gt;样本划分-&gt;特征提取-&gt;合并为数据集-&gt;训练模型-&gt;选取最优模型-&gt;end</span><br></pre></td></tr></table></figure>\n<h3 id=\"取得数据\"><a href=\"#取得数据\" class=\"headerlink\" title=\"取得数据\"></a>取得数据</h3><p>这个感觉没什么说的，如果是比赛的话就直接下载就行了，如果是做项目就在数据库里面去提就行了。</p>\n<h3 id=\"样本划分\"><a href=\"#样本划分\" class=\"headerlink\" title=\"样本划分\"></a>样本划分</h3><p>在学习的时候就因为对这个概念的理解不正确以及对整体流程掌握的不正确而走了许多弯路。</p>\n<p>数据集有三个，分别是训练集，验证集以及测试集。三个数据集的基本形式应该是相同的，只是在过程中的作用不同而名字也不同。顾名思义，训练集的作用就是训练模型，验证集的作用就是验证模型预测的准确度，测试集就是放在线上进行测试的数据集。</p>\n<h3 id=\"特征提取\"><a href=\"#特征提取\" class=\"headerlink\" title=\"特征提取\"></a>特征提取</h3><p>特征提取是根据划分之后的样本通过改变不同的特征提取的规则进行样本的特征的提取的工作。特征就是对样本的描述，作用就是将特征与样本数据合并进行模型的训练。</p>\n<p>为什么要进行特征的提取？</p>\n<p>这个问题我有想过，通过了解人工神经网络有了一些认识。</p>\n<p>个人理解来说，训练出来的模型更像是一个数学公式，也就是我们大家都很熟悉的n元一次方程。</p>\n<h3 id=\"简单了解神经网络\"><a href=\"#简单了解神经网络\" class=\"headerlink\" title=\"简单了解神经网络\"></a>简单了解神经网络</h3><p>通过阅读吴军博士的《数学之美》（第二版），非常浅显的了解了一些神经网络。</p>\n<p>训练模型的过程个人觉得和神经网络应该有一些联系，神经网络如图：</p>\n<p><img src=\"/img/20170122_1.jpg\" alt=\"neural network\"></p>\n<p>神经网络分为几部分：输入端，神经元，输出端。</p>\n<p>输入端就是key，神经元就是特征以及其所占权值，训练集中输出端就是标签，测试集中输出端就是结果了。</p>\n<p>训练模型就是通过神经网络去分析各个特征所占的权值。最后进行一次函数变换就可以确定输出的结果了。</p>\n<hr>\n<p>个人对于数据挖掘的理解暂时只有这些，感谢阅读。</p>\n<p>cheers！</p>\n","site":{"data":{}},"excerpt":"<p>在16年的12月份我接触到的数据挖掘，也就是上个月，在很久很久以前就已经听说过这方面的东西，也一直都很想要学习一下数据挖掘这门技术，正巧上个月学校有一个数据挖掘的兴趣小组。故事就从这里开始了。。。</p>","more":"<h3 id=\"整体的流程\"><a href=\"#整体的流程\" class=\"headerlink\" title=\"整体的流程\"></a>整体的流程</h3><p>虽然我现在连一个完整的项目都还没有做过，但是我就是想要写一下，用百度去搜数据挖掘的相关资料时，上面都是一些非常深奥的东西，对于像我这种新手不是十分友好，所以我就想要来写一些大概的流程，如果有大神发现有错误的话欢迎来指正。</p>\n<p>总体的流程一共有几步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">取得数据-&gt;样本划分-&gt;特征提取-&gt;合并为数据集-&gt;训练模型-&gt;选取最优模型-&gt;end</span><br></pre></td></tr></table></figure>\n<h3 id=\"取得数据\"><a href=\"#取得数据\" class=\"headerlink\" title=\"取得数据\"></a>取得数据</h3><p>这个感觉没什么说的，如果是比赛的话就直接下载就行了，如果是做项目就在数据库里面去提就行了。</p>\n<h3 id=\"样本划分\"><a href=\"#样本划分\" class=\"headerlink\" title=\"样本划分\"></a>样本划分</h3><p>在学习的时候就因为对这个概念的理解不正确以及对整体流程掌握的不正确而走了许多弯路。</p>\n<p>数据集有三个，分别是训练集，验证集以及测试集。三个数据集的基本形式应该是相同的，只是在过程中的作用不同而名字也不同。顾名思义，训练集的作用就是训练模型，验证集的作用就是验证模型预测的准确度，测试集就是放在线上进行测试的数据集。</p>\n<h3 id=\"特征提取\"><a href=\"#特征提取\" class=\"headerlink\" title=\"特征提取\"></a>特征提取</h3><p>特征提取是根据划分之后的样本通过改变不同的特征提取的规则进行样本的特征的提取的工作。特征就是对样本的描述，作用就是将特征与样本数据合并进行模型的训练。</p>\n<p>为什么要进行特征的提取？</p>\n<p>这个问题我有想过，通过了解人工神经网络有了一些认识。</p>\n<p>个人理解来说，训练出来的模型更像是一个数学公式，也就是我们大家都很熟悉的n元一次方程。</p>\n<h3 id=\"简单了解神经网络\"><a href=\"#简单了解神经网络\" class=\"headerlink\" title=\"简单了解神经网络\"></a>简单了解神经网络</h3><p>通过阅读吴军博士的《数学之美》（第二版），非常浅显的了解了一些神经网络。</p>\n<p>训练模型的过程个人觉得和神经网络应该有一些联系，神经网络如图：</p>\n<p><img src=\"/img/20170122_1.jpg\" alt=\"neural network\"></p>\n<p>神经网络分为几部分：输入端，神经元，输出端。</p>\n<p>输入端就是key，神经元就是特征以及其所占权值，训练集中输出端就是标签，测试集中输出端就是结果了。</p>\n<p>训练模型就是通过神经网络去分析各个特征所占的权值。最后进行一次函数变换就可以确定输出的结果了。</p>\n<hr>\n<p>个人对于数据挖掘的理解暂时只有这些，感谢阅读。</p>\n<p>cheers！</p>"},{"title":"hello world","date":"2017-01-21T01:39:26.000Z","_content":"\n\n折腾了好久的博客，原本是想要自己去做所有的东西，但是因为懒所以只是做了一些就一直放在那里了。最近学了一些数据挖掘相关的东西，忍不住自己想要装逼的心情，正好这个假期没有出去实习，在家呆着就准备搞博客了，这个博客是hexo的，大概了解了一下。\n\n\n\n### 今年我23\n\n\n不知不觉已经23岁了，距离大学毕业还有一段距离，现在就是心里想的最多，但是却最无能为力的时候。\n\n\n每次独处都好像想了很多很多，但是又好像什么都没有想。\n\n\n成长一直是一个沉重的话题。\n\n\n算了。学习去了\n\n","source":"_posts/first-blog.md","raw":"---\ntitle: hello world\ndate: 2017-01-21 09:39:26\ncategories: 杂记\ntags: 心情\n---\n\n\n折腾了好久的博客，原本是想要自己去做所有的东西，但是因为懒所以只是做了一些就一直放在那里了。最近学了一些数据挖掘相关的东西，忍不住自己想要装逼的心情，正好这个假期没有出去实习，在家呆着就准备搞博客了，这个博客是hexo的，大概了解了一下。\n\n\n\n### 今年我23\n\n\n不知不觉已经23岁了，距离大学毕业还有一段距离，现在就是心里想的最多，但是却最无能为力的时候。\n\n\n每次独处都好像想了很多很多，但是又好像什么都没有想。\n\n\n成长一直是一个沉重的话题。\n\n\n算了。学习去了\n\n","slug":"first-blog","published":1,"updated":"2018-09-26T07:23:21.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmjywgu300061l3hy4mnnjy8","content":"<p>折腾了好久的博客，原本是想要自己去做所有的东西，但是因为懒所以只是做了一些就一直放在那里了。最近学了一些数据挖掘相关的东西，忍不住自己想要装逼的心情，正好这个假期没有出去实习，在家呆着就准备搞博客了，这个博客是hexo的，大概了解了一下。</p>\n<h3 id=\"今年我23\"><a href=\"#今年我23\" class=\"headerlink\" title=\"今年我23\"></a>今年我23</h3><p>不知不觉已经23岁了，距离大学毕业还有一段距离，现在就是心里想的最多，但是却最无能为力的时候。</p>\n<p>每次独处都好像想了很多很多，但是又好像什么都没有想。</p>\n<p>成长一直是一个沉重的话题。</p>\n<p>算了。学习去了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>折腾了好久的博客，原本是想要自己去做所有的东西，但是因为懒所以只是做了一些就一直放在那里了。最近学了一些数据挖掘相关的东西，忍不住自己想要装逼的心情，正好这个假期没有出去实习，在家呆着就准备搞博客了，这个博客是hexo的，大概了解了一下。</p>\n<h3 id=\"今年我23\"><a href=\"#今年我23\" class=\"headerlink\" title=\"今年我23\"></a>今年我23</h3><p>不知不觉已经23岁了，距离大学毕业还有一段距离，现在就是心里想的最多，但是却最无能为力的时候。</p>\n<p>每次独处都好像想了很多很多，但是又好像什么都没有想。</p>\n<p>成长一直是一个沉重的话题。</p>\n<p>算了。学习去了</p>\n"},{"title":"对于hexo new的web端构想","date":"2017-02-13T23:55:57.000Z","_content":"\n用了一段时间的hexo，感觉在pc端用着还是很方便的，但是有一些时候，想用手机在博客上记录一些自己的心情时却无能为力，所以突发奇想想要做一个hexo新建文章的web端，作为一名程序员，想要把一些繁琐的过程自动化实现，最首先的构想就是流程的控制，流程就分为几步：\n\n```\n新建文章->修改博文类别等信息->编写markdown内容->更新hexo博客内容->上传到hexo博客仓库\n```\n\n以下所有内容都是以nodejs作为后端语言的构想。并且会在本月26号开学之后进行代码的实现\n\n<!--more-->\n\n### 新建文章||新建文章&&修改博文类别信息\n\n用过hexo的都知道，新建文章的命令是hexo new \"postname\"，那么web端想要进行文章的新建就有两种方法，第一种就是运行hexo命令，第二种就是直接按照hexo new命令新建出来的文件的格式，使用fs进行新建文件，将一些必要信息输入进新建的文件中，个人偏向于使用第二种方法，因为第一种方法的流程控制比较麻烦，需要等hexo new命令，还需要进入新建出的文件进行信息的修改。第二种方法的优势就是可以在web端直接填写一些必要信息，将这些信息收到后直接填入md文件中，之后执行hexo g&d命令。\n\n所以暂时选用第二种方法。\n\n### 编写markdown内容\n\n感觉这部分东西会比较简单，因为有一些很成熟的markdown编辑器，可以看见实时的效果。\n\n这部分内容没有什么好思考的\n\n### 更新hexo博客内容&&上传到仓库\n\nnodejs.process.exec运行hexo g和hexo d命令就可以了\n\n### 安全性问题\n\n在web端新建文章，提交到后端时加上校验就可以了，在json文件中存入一个password，将前端的输入与password进行对比就可以了。不是特别麻烦。","source":"_posts/hexo&web.md","raw":"---\ntitle: 对于hexo new的web端构想\ndate: 2017-02-14 07:55:57\ncategories: 技术\ntags: [\"nodejs\", \"hexo\"]\n---\n\n用了一段时间的hexo，感觉在pc端用着还是很方便的，但是有一些时候，想用手机在博客上记录一些自己的心情时却无能为力，所以突发奇想想要做一个hexo新建文章的web端，作为一名程序员，想要把一些繁琐的过程自动化实现，最首先的构想就是流程的控制，流程就分为几步：\n\n```\n新建文章->修改博文类别等信息->编写markdown内容->更新hexo博客内容->上传到hexo博客仓库\n```\n\n以下所有内容都是以nodejs作为后端语言的构想。并且会在本月26号开学之后进行代码的实现\n\n<!--more-->\n\n### 新建文章||新建文章&&修改博文类别信息\n\n用过hexo的都知道，新建文章的命令是hexo new \"postname\"，那么web端想要进行文章的新建就有两种方法，第一种就是运行hexo命令，第二种就是直接按照hexo new命令新建出来的文件的格式，使用fs进行新建文件，将一些必要信息输入进新建的文件中，个人偏向于使用第二种方法，因为第一种方法的流程控制比较麻烦，需要等hexo new命令，还需要进入新建出的文件进行信息的修改。第二种方法的优势就是可以在web端直接填写一些必要信息，将这些信息收到后直接填入md文件中，之后执行hexo g&d命令。\n\n所以暂时选用第二种方法。\n\n### 编写markdown内容\n\n感觉这部分东西会比较简单，因为有一些很成熟的markdown编辑器，可以看见实时的效果。\n\n这部分内容没有什么好思考的\n\n### 更新hexo博客内容&&上传到仓库\n\nnodejs.process.exec运行hexo g和hexo d命令就可以了\n\n### 安全性问题\n\n在web端新建文章，提交到后端时加上校验就可以了，在json文件中存入一个password，将前端的输入与password进行对比就可以了。不是特别麻烦。","slug":"hexo&web","published":1,"updated":"2018-09-26T07:23:21.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmjywgu500081l3hgay1705c","content":"<p>用了一段时间的hexo，感觉在pc端用着还是很方便的，但是有一些时候，想用手机在博客上记录一些自己的心情时却无能为力，所以突发奇想想要做一个hexo新建文章的web端，作为一名程序员，想要把一些繁琐的过程自动化实现，最首先的构想就是流程的控制，流程就分为几步：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新建文章-&gt;修改博文类别等信息-&gt;编写markdown内容-&gt;更新hexo博客内容-&gt;上传到hexo博客仓库</span><br></pre></td></tr></table></figure>\n<p>以下所有内容都是以nodejs作为后端语言的构想。并且会在本月26号开学之后进行代码的实现</p>\n<a id=\"more\"></a>\n<h3 id=\"新建文章-新建文章-amp-amp-修改博文类别信息\"><a href=\"#新建文章-新建文章-amp-amp-修改博文类别信息\" class=\"headerlink\" title=\"新建文章||新建文章&amp;&amp;修改博文类别信息\"></a>新建文章||新建文章&amp;&amp;修改博文类别信息</h3><p>用过hexo的都知道，新建文章的命令是hexo new “postname”，那么web端想要进行文章的新建就有两种方法，第一种就是运行hexo命令，第二种就是直接按照hexo new命令新建出来的文件的格式，使用fs进行新建文件，将一些必要信息输入进新建的文件中，个人偏向于使用第二种方法，因为第一种方法的流程控制比较麻烦，需要等hexo new命令，还需要进入新建出的文件进行信息的修改。第二种方法的优势就是可以在web端直接填写一些必要信息，将这些信息收到后直接填入md文件中，之后执行hexo g&amp;d命令。</p>\n<p>所以暂时选用第二种方法。</p>\n<h3 id=\"编写markdown内容\"><a href=\"#编写markdown内容\" class=\"headerlink\" title=\"编写markdown内容\"></a>编写markdown内容</h3><p>感觉这部分东西会比较简单，因为有一些很成熟的markdown编辑器，可以看见实时的效果。</p>\n<p>这部分内容没有什么好思考的</p>\n<h3 id=\"更新hexo博客内容-amp-amp-上传到仓库\"><a href=\"#更新hexo博客内容-amp-amp-上传到仓库\" class=\"headerlink\" title=\"更新hexo博客内容&amp;&amp;上传到仓库\"></a>更新hexo博客内容&amp;&amp;上传到仓库</h3><p>nodejs.process.exec运行hexo g和hexo d命令就可以了</p>\n<h3 id=\"安全性问题\"><a href=\"#安全性问题\" class=\"headerlink\" title=\"安全性问题\"></a>安全性问题</h3><p>在web端新建文章，提交到后端时加上校验就可以了，在json文件中存入一个password，将前端的输入与password进行对比就可以了。不是特别麻烦。</p>\n","site":{"data":{}},"excerpt":"<p>用了一段时间的hexo，感觉在pc端用着还是很方便的，但是有一些时候，想用手机在博客上记录一些自己的心情时却无能为力，所以突发奇想想要做一个hexo新建文章的web端，作为一名程序员，想要把一些繁琐的过程自动化实现，最首先的构想就是流程的控制，流程就分为几步：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新建文章-&gt;修改博文类别等信息-&gt;编写markdown内容-&gt;更新hexo博客内容-&gt;上传到hexo博客仓库</span><br></pre></td></tr></table></figure>\n<p>以下所有内容都是以nodejs作为后端语言的构想。并且会在本月26号开学之后进行代码的实现</p>","more":"<h3 id=\"新建文章-新建文章-amp-amp-修改博文类别信息\"><a href=\"#新建文章-新建文章-amp-amp-修改博文类别信息\" class=\"headerlink\" title=\"新建文章||新建文章&amp;&amp;修改博文类别信息\"></a>新建文章||新建文章&amp;&amp;修改博文类别信息</h3><p>用过hexo的都知道，新建文章的命令是hexo new “postname”，那么web端想要进行文章的新建就有两种方法，第一种就是运行hexo命令，第二种就是直接按照hexo new命令新建出来的文件的格式，使用fs进行新建文件，将一些必要信息输入进新建的文件中，个人偏向于使用第二种方法，因为第一种方法的流程控制比较麻烦，需要等hexo new命令，还需要进入新建出的文件进行信息的修改。第二种方法的优势就是可以在web端直接填写一些必要信息，将这些信息收到后直接填入md文件中，之后执行hexo g&amp;d命令。</p>\n<p>所以暂时选用第二种方法。</p>\n<h3 id=\"编写markdown内容\"><a href=\"#编写markdown内容\" class=\"headerlink\" title=\"编写markdown内容\"></a>编写markdown内容</h3><p>感觉这部分东西会比较简单，因为有一些很成熟的markdown编辑器，可以看见实时的效果。</p>\n<p>这部分内容没有什么好思考的</p>\n<h3 id=\"更新hexo博客内容-amp-amp-上传到仓库\"><a href=\"#更新hexo博客内容-amp-amp-上传到仓库\" class=\"headerlink\" title=\"更新hexo博客内容&amp;&amp;上传到仓库\"></a>更新hexo博客内容&amp;&amp;上传到仓库</h3><p>nodejs.process.exec运行hexo g和hexo d命令就可以了</p>\n<h3 id=\"安全性问题\"><a href=\"#安全性问题\" class=\"headerlink\" title=\"安全性问题\"></a>安全性问题</h3><p>在web端新建文章，提交到后端时加上校验就可以了，在json文件中存入一个password，将前端的输入与password进行对比就可以了。不是特别麻烦。</p>"},{"title":"基于nodejs的web server","date":"2017-01-23T01:35:45.000Z","_content":"\n有的同学可能很不理解，明明有那么多好用的nodejs的框架，你为什么要自己写一个，况且你写的肯定没有那些框架的用起来稳定，也没有那么舒服。\n\n原因很简单，那次鹅厂的实习生面试，二面时面试官说用express做的后端没有什么技术含量。我觉得很有道理，想了很久什么样的框架用起来有技术含量。最后决定自己写一个。在写本篇博客过程中也重新梳理了一番思路，并对一些功能进行修改，在之后我会对框架进行修改。\n\n这篇博客中代码不会有很多，还有很多的地方只是一些思想而已，目前并没有抽象为代码。不说闲话，上干货\n\n<!--more-->\n\n### router整体思路\n\n现在在网上有很多的简单运行一个http server的demo\n```javascript\nvar http = require(\"http\");\n\nhttp.createServer(function(req,res){\n    res.write(\"hello world\");\n    res.end();\n}).listen(3000);\n```\n大概就是这样，这个很简单，但是如果想要自己来写一个server的话这些还远远不够。\n\n首先要知道，nodejs是事件驱动模型，也就是每当有一个请求到了监听的端口时，都会运行一次httpserver回调函数的代码，所以我们可以根据这个进行路由的分发。\n\n那么路由的分发也会分成几个部分，比如想要托管一部分的静态资源，并且进行缓存的控制，如访问某一个文件夹时自动返回index.html文件等简单功能，另外的就是通过自定义接口 比如\n```javascript\napp.get(\"url\",function(req,res){\n    res.writeHead(200);\n    res.end();\n});\n```\n这个就需要自己来编写对应的一些代码。还有一些功能就不一一列举了。\n\n### 路由分发\n\n![路由分发](/img/20170123_1.svg)\n\n路由分发最基本的操作就是url的解析，这个有原生的url模块支撑，具体用法为   \n```javascript\nurl.parse(req,url);\n```\n分为两部分：\n\n - 静态资源\n\n 可能有的同学会很不理解，静态资源的托管不是应该给服务器做的东西么，我从前知道的所有后端只需要配置跟文件目录就可以了。这个就是不同语言的不同之处了。node的httpserver是直接监听的端口，而静态资源究其根本也是一个get请求。所以这个也需要进行路由的分发，只不过是将静态资源的请求分发到同一个接口进行处理。\n\n 具体的操作是将解析后的url进行正则匹配判断是否为静态资源，如果是静态资源的话就使用req，res作为参数传到另外一个函数中进行操作。\n\n 在另外一个函数中进行资源的查找，分别判断是否存在（fs.exists），以及客户端资源是否与本地资源相同（fs.stat）也就是判断是否应该返回304.\n\n - 自定义接口\n\n 这部分算是重头戏了，因为这才是我们做路由所需要的最多的地方。这部分的流程图如下\n\n ![自定义接口](/img/20170123_2.svg)\n\n 以前遇到过有个同学对这个流程有一些质疑，因为看起来这个流程有一些复杂，每次都要进行很多的判断，而且看起来和静态资源托管部分有重复。\n\n 这部分有一个优先级问题，我认为自定义接口优先级大于静态资源，所以这部分我的做法是这样的，也可以每次先进行静态资源的判断，即为\n\n ![另一种方法](/img/20170123_3.svg)\n\n 如果两种方法都想要用的话就可以通过进行一些参数的设置进行更改不同的流程，这个应该比较简单了。\n\n ---\n 接下来是自定义接口的定义，存储以及匹配问题，我个人在最开始的时候想到的方法是通过两个数组进行存储，当然这个方法很不稳定，经常会有出错的时候，大致就是接口的key,value在不同数组分别存储，然后通过array.indexOf进行判断key是否存在以及value的提取。\n\n 但是因为上述方法在实际测试中很不稳定，所以在当时重新梳理了一番思路，使用了另外一种方法，也就是key:value形式，使用object进行存储。这个方法还有一种好处就是可以很简单的实现app.use方法。\n\n 具体的数据形式就是\n```javascript\nrouterpool{\n  \"url\":{\n    method:{\n      \"get\":function,\n      \"post\":function\n    }\n  }\n  \"url2\":{\n    method:{\n      \"get\":function,\n      \"post\":function\n    }\n    children:{\n      \"1\":{\n        method:{\n          \"get\":function,\n          \"post\":function\n        }\n      }\n    }\n  }\n}\n```\n\n 上面的就是通过\n\n ```javascript\n app.get(\"url\", function(req,res){});\n app.post(\"url\", function(req,res){});\n app.get(\"url2\", function(req,res){});\n app.post(\"url2\", function(req,res){});\n app.use(\"url2\", function(req,res){\n    app.get(\"1\", function(req,res){});\n    app.post(\"1\", function(req,res){});\n })\n ```\n 所构造的数据格式。实际访问的就是\"url\",\"url2/1\"。这两个地址，通过不同的方法访问会有不同的代码。\n\n 判断是否存在接口就是用routerpool[url][method][req.method]判断是否存在，以及通过调用的方法不同进行fucntion的选择。\n\n ---\n\n 以上就是当前我对自己写httpserver的一些思想，心得，理解。感谢阅读\n\n cheers！","source":"_posts/node-route.md","raw":"---\ntitle: 基于nodejs的web server\ndate: 2017-01-23 09:35:45\ncategories: 技术\ntags: nodejs\n---\n\n有的同学可能很不理解，明明有那么多好用的nodejs的框架，你为什么要自己写一个，况且你写的肯定没有那些框架的用起来稳定，也没有那么舒服。\n\n原因很简单，那次鹅厂的实习生面试，二面时面试官说用express做的后端没有什么技术含量。我觉得很有道理，想了很久什么样的框架用起来有技术含量。最后决定自己写一个。在写本篇博客过程中也重新梳理了一番思路，并对一些功能进行修改，在之后我会对框架进行修改。\n\n这篇博客中代码不会有很多，还有很多的地方只是一些思想而已，目前并没有抽象为代码。不说闲话，上干货\n\n<!--more-->\n\n### router整体思路\n\n现在在网上有很多的简单运行一个http server的demo\n```javascript\nvar http = require(\"http\");\n\nhttp.createServer(function(req,res){\n    res.write(\"hello world\");\n    res.end();\n}).listen(3000);\n```\n大概就是这样，这个很简单，但是如果想要自己来写一个server的话这些还远远不够。\n\n首先要知道，nodejs是事件驱动模型，也就是每当有一个请求到了监听的端口时，都会运行一次httpserver回调函数的代码，所以我们可以根据这个进行路由的分发。\n\n那么路由的分发也会分成几个部分，比如想要托管一部分的静态资源，并且进行缓存的控制，如访问某一个文件夹时自动返回index.html文件等简单功能，另外的就是通过自定义接口 比如\n```javascript\napp.get(\"url\",function(req,res){\n    res.writeHead(200);\n    res.end();\n});\n```\n这个就需要自己来编写对应的一些代码。还有一些功能就不一一列举了。\n\n### 路由分发\n\n![路由分发](/img/20170123_1.svg)\n\n路由分发最基本的操作就是url的解析，这个有原生的url模块支撑，具体用法为   \n```javascript\nurl.parse(req,url);\n```\n分为两部分：\n\n - 静态资源\n\n 可能有的同学会很不理解，静态资源的托管不是应该给服务器做的东西么，我从前知道的所有后端只需要配置跟文件目录就可以了。这个就是不同语言的不同之处了。node的httpserver是直接监听的端口，而静态资源究其根本也是一个get请求。所以这个也需要进行路由的分发，只不过是将静态资源的请求分发到同一个接口进行处理。\n\n 具体的操作是将解析后的url进行正则匹配判断是否为静态资源，如果是静态资源的话就使用req，res作为参数传到另外一个函数中进行操作。\n\n 在另外一个函数中进行资源的查找，分别判断是否存在（fs.exists），以及客户端资源是否与本地资源相同（fs.stat）也就是判断是否应该返回304.\n\n - 自定义接口\n\n 这部分算是重头戏了，因为这才是我们做路由所需要的最多的地方。这部分的流程图如下\n\n ![自定义接口](/img/20170123_2.svg)\n\n 以前遇到过有个同学对这个流程有一些质疑，因为看起来这个流程有一些复杂，每次都要进行很多的判断，而且看起来和静态资源托管部分有重复。\n\n 这部分有一个优先级问题，我认为自定义接口优先级大于静态资源，所以这部分我的做法是这样的，也可以每次先进行静态资源的判断，即为\n\n ![另一种方法](/img/20170123_3.svg)\n\n 如果两种方法都想要用的话就可以通过进行一些参数的设置进行更改不同的流程，这个应该比较简单了。\n\n ---\n 接下来是自定义接口的定义，存储以及匹配问题，我个人在最开始的时候想到的方法是通过两个数组进行存储，当然这个方法很不稳定，经常会有出错的时候，大致就是接口的key,value在不同数组分别存储，然后通过array.indexOf进行判断key是否存在以及value的提取。\n\n 但是因为上述方法在实际测试中很不稳定，所以在当时重新梳理了一番思路，使用了另外一种方法，也就是key:value形式，使用object进行存储。这个方法还有一种好处就是可以很简单的实现app.use方法。\n\n 具体的数据形式就是\n```javascript\nrouterpool{\n  \"url\":{\n    method:{\n      \"get\":function,\n      \"post\":function\n    }\n  }\n  \"url2\":{\n    method:{\n      \"get\":function,\n      \"post\":function\n    }\n    children:{\n      \"1\":{\n        method:{\n          \"get\":function,\n          \"post\":function\n        }\n      }\n    }\n  }\n}\n```\n\n 上面的就是通过\n\n ```javascript\n app.get(\"url\", function(req,res){});\n app.post(\"url\", function(req,res){});\n app.get(\"url2\", function(req,res){});\n app.post(\"url2\", function(req,res){});\n app.use(\"url2\", function(req,res){\n    app.get(\"1\", function(req,res){});\n    app.post(\"1\", function(req,res){});\n })\n ```\n 所构造的数据格式。实际访问的就是\"url\",\"url2/1\"。这两个地址，通过不同的方法访问会有不同的代码。\n\n 判断是否存在接口就是用routerpool[url][method][req.method]判断是否存在，以及通过调用的方法不同进行fucntion的选择。\n\n ---\n\n 以上就是当前我对自己写httpserver的一些思想，心得，理解。感谢阅读\n\n cheers！","slug":"node-route","published":1,"updated":"2018-09-26T07:23:21.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmjywgu600091l3hmcefzea6","content":"<p>有的同学可能很不理解，明明有那么多好用的nodejs的框架，你为什么要自己写一个，况且你写的肯定没有那些框架的用起来稳定，也没有那么舒服。</p>\n<p>原因很简单，那次鹅厂的实习生面试，二面时面试官说用express做的后端没有什么技术含量。我觉得很有道理，想了很久什么样的框架用起来有技术含量。最后决定自己写一个。在写本篇博客过程中也重新梳理了一番思路，并对一些功能进行修改，在之后我会对框架进行修改。</p>\n<p>这篇博客中代码不会有很多，还有很多的地方只是一些思想而已，目前并没有抽象为代码。不说闲话，上干货</p>\n<a id=\"more\"></a>\n<h3 id=\"router整体思路\"><a href=\"#router整体思路\" class=\"headerlink\" title=\"router整体思路\"></a>router整体思路</h3><p>现在在网上有很多的简单运行一个http server的demo<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.write(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>大概就是这样，这个很简单，但是如果想要自己来写一个server的话这些还远远不够。</p>\n<p>首先要知道，nodejs是事件驱动模型，也就是每当有一个请求到了监听的端口时，都会运行一次httpserver回调函数的代码，所以我们可以根据这个进行路由的分发。</p>\n<p>那么路由的分发也会分成几个部分，比如想要托管一部分的静态资源，并且进行缓存的控制，如访问某一个文件夹时自动返回index.html文件等简单功能，另外的就是通过自定义接口 比如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"url\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这个就需要自己来编写对应的一些代码。还有一些功能就不一一列举了。</p>\n<h3 id=\"路由分发\"><a href=\"#路由分发\" class=\"headerlink\" title=\"路由分发\"></a>路由分发</h3><p><img src=\"/img/20170123_1.svg\" alt=\"路由分发\"></p>\n<p>路由分发最基本的操作就是url的解析，这个有原生的url模块支撑，具体用法为<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url.parse(req,url);</span><br></pre></td></tr></table></figure></p>\n<p>分为两部分：</p>\n<ul>\n<li><p>静态资源</p>\n<p>可能有的同学会很不理解，静态资源的托管不是应该给服务器做的东西么，我从前知道的所有后端只需要配置跟文件目录就可以了。这个就是不同语言的不同之处了。node的httpserver是直接监听的端口，而静态资源究其根本也是一个get请求。所以这个也需要进行路由的分发，只不过是将静态资源的请求分发到同一个接口进行处理。</p>\n<p>具体的操作是将解析后的url进行正则匹配判断是否为静态资源，如果是静态资源的话就使用req，res作为参数传到另外一个函数中进行操作。</p>\n<p>在另外一个函数中进行资源的查找，分别判断是否存在（fs.exists），以及客户端资源是否与本地资源相同（fs.stat）也就是判断是否应该返回304.</p>\n</li>\n<li><p>自定义接口</p>\n<p>这部分算是重头戏了，因为这才是我们做路由所需要的最多的地方。这部分的流程图如下</p>\n<p><img src=\"/img/20170123_2.svg\" alt=\"自定义接口\"></p>\n<p>以前遇到过有个同学对这个流程有一些质疑，因为看起来这个流程有一些复杂，每次都要进行很多的判断，而且看起来和静态资源托管部分有重复。</p>\n<p>这部分有一个优先级问题，我认为自定义接口优先级大于静态资源，所以这部分我的做法是这样的，也可以每次先进行静态资源的判断，即为</p>\n<p><img src=\"/img/20170123_3.svg\" alt=\"另一种方法\"></p>\n<p>如果两种方法都想要用的话就可以通过进行一些参数的设置进行更改不同的流程，这个应该比较简单了。</p>\n</li>\n</ul>\n<hr>\n<p> 接下来是自定义接口的定义，存储以及匹配问题，我个人在最开始的时候想到的方法是通过两个数组进行存储，当然这个方法很不稳定，经常会有出错的时候，大致就是接口的key,value在不同数组分别存储，然后通过array.indexOf进行判断key是否存在以及value的提取。</p>\n<p> 但是因为上述方法在实际测试中很不稳定，所以在当时重新梳理了一番思路，使用了另外一种方法，也就是key:value形式，使用object进行存储。这个方法还有一种好处就是可以很简单的实现app.use方法。</p>\n<p> 具体的数据形式就是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routerpool&#123;</span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>:&#123;</span><br><span class=\"line\">    method:&#123;</span><br><span class=\"line\">      <span class=\"string\">\"get\"</span>:<span class=\"function\"><span class=\"keyword\">function</span>,</span></span><br><span class=\"line\"><span class=\"function\">      \"<span class=\"title\">post</span>\":<span class=\"title\">function</span></span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">  &#125;</span></span><br><span class=\"line\"><span class=\"function\">  \"<span class=\"title\">url2</span>\":</span>&#123;</span><br><span class=\"line\">    method:&#123;</span><br><span class=\"line\">      <span class=\"string\">\"get\"</span>:<span class=\"function\"><span class=\"keyword\">function</span>,</span></span><br><span class=\"line\"><span class=\"function\">      \"<span class=\"title\">post</span>\":<span class=\"title\">function</span></span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">children</span>:</span>&#123;</span><br><span class=\"line\">      <span class=\"string\">\"1\"</span>:&#123;</span><br><span class=\"line\">        method:&#123;</span><br><span class=\"line\">          <span class=\"string\">\"get\"</span>:<span class=\"function\"><span class=\"keyword\">function</span>,</span></span><br><span class=\"line\"><span class=\"function\">          \"<span class=\"title\">post</span>\":<span class=\"title\">function</span></span></span><br><span class=\"line\"><span class=\"function\">        &#125;</span></span><br><span class=\"line\"><span class=\"function\">      &#125;</span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">  &#125;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p> 上面的就是通过</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"url\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">\"url\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">\"url2\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">\"url2\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">app.use(<span class=\"string\">\"url2\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">   app.get(<span class=\"string\">\"1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">   app.post(<span class=\"string\">\"1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p> 所构造的数据格式。实际访问的就是”url”,”url2/1”。这两个地址，通过不同的方法访问会有不同的代码。</p>\n<p> 判断是否存在接口就是用routerpool[url][method][req.method]判断是否存在，以及通过调用的方法不同进行fucntion的选择。</p>\n<hr>\n<p> 以上就是当前我对自己写httpserver的一些思想，心得，理解。感谢阅读</p>\n<p> cheers！</p>\n","site":{"data":{}},"excerpt":"<p>有的同学可能很不理解，明明有那么多好用的nodejs的框架，你为什么要自己写一个，况且你写的肯定没有那些框架的用起来稳定，也没有那么舒服。</p>\n<p>原因很简单，那次鹅厂的实习生面试，二面时面试官说用express做的后端没有什么技术含量。我觉得很有道理，想了很久什么样的框架用起来有技术含量。最后决定自己写一个。在写本篇博客过程中也重新梳理了一番思路，并对一些功能进行修改，在之后我会对框架进行修改。</p>\n<p>这篇博客中代码不会有很多，还有很多的地方只是一些思想而已，目前并没有抽象为代码。不说闲话，上干货</p>","more":"<h3 id=\"router整体思路\"><a href=\"#router整体思路\" class=\"headerlink\" title=\"router整体思路\"></a>router整体思路</h3><p>现在在网上有很多的简单运行一个http server的demo<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.write(<span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>大概就是这样，这个很简单，但是如果想要自己来写一个server的话这些还远远不够。</p>\n<p>首先要知道，nodejs是事件驱动模型，也就是每当有一个请求到了监听的端口时，都会运行一次httpserver回调函数的代码，所以我们可以根据这个进行路由的分发。</p>\n<p>那么路由的分发也会分成几个部分，比如想要托管一部分的静态资源，并且进行缓存的控制，如访问某一个文件夹时自动返回index.html文件等简单功能，另外的就是通过自定义接口 比如<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"url\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">    res.writeHead(<span class=\"number\">200</span>);</span><br><span class=\"line\">    res.end();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>这个就需要自己来编写对应的一些代码。还有一些功能就不一一列举了。</p>\n<h3 id=\"路由分发\"><a href=\"#路由分发\" class=\"headerlink\" title=\"路由分发\"></a>路由分发</h3><p><img src=\"/img/20170123_1.svg\" alt=\"路由分发\"></p>\n<p>路由分发最基本的操作就是url的解析，这个有原生的url模块支撑，具体用法为<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url.parse(req,url);</span><br></pre></td></tr></table></figure></p>\n<p>分为两部分：</p>\n<ul>\n<li><p>静态资源</p>\n<p>可能有的同学会很不理解，静态资源的托管不是应该给服务器做的东西么，我从前知道的所有后端只需要配置跟文件目录就可以了。这个就是不同语言的不同之处了。node的httpserver是直接监听的端口，而静态资源究其根本也是一个get请求。所以这个也需要进行路由的分发，只不过是将静态资源的请求分发到同一个接口进行处理。</p>\n<p>具体的操作是将解析后的url进行正则匹配判断是否为静态资源，如果是静态资源的话就使用req，res作为参数传到另外一个函数中进行操作。</p>\n<p>在另外一个函数中进行资源的查找，分别判断是否存在（fs.exists），以及客户端资源是否与本地资源相同（fs.stat）也就是判断是否应该返回304.</p>\n</li>\n<li><p>自定义接口</p>\n<p>这部分算是重头戏了，因为这才是我们做路由所需要的最多的地方。这部分的流程图如下</p>\n<p><img src=\"/img/20170123_2.svg\" alt=\"自定义接口\"></p>\n<p>以前遇到过有个同学对这个流程有一些质疑，因为看起来这个流程有一些复杂，每次都要进行很多的判断，而且看起来和静态资源托管部分有重复。</p>\n<p>这部分有一个优先级问题，我认为自定义接口优先级大于静态资源，所以这部分我的做法是这样的，也可以每次先进行静态资源的判断，即为</p>\n<p><img src=\"/img/20170123_3.svg\" alt=\"另一种方法\"></p>\n<p>如果两种方法都想要用的话就可以通过进行一些参数的设置进行更改不同的流程，这个应该比较简单了。</p>\n</li>\n</ul>\n<hr>\n<p> 接下来是自定义接口的定义，存储以及匹配问题，我个人在最开始的时候想到的方法是通过两个数组进行存储，当然这个方法很不稳定，经常会有出错的时候，大致就是接口的key,value在不同数组分别存储，然后通过array.indexOf进行判断key是否存在以及value的提取。</p>\n<p> 但是因为上述方法在实际测试中很不稳定，所以在当时重新梳理了一番思路，使用了另外一种方法，也就是key:value形式，使用object进行存储。这个方法还有一种好处就是可以很简单的实现app.use方法。</p>\n<p> 具体的数据形式就是<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routerpool&#123;</span><br><span class=\"line\">  <span class=\"string\">\"url\"</span>:&#123;</span><br><span class=\"line\">    method:&#123;</span><br><span class=\"line\">      <span class=\"string\">\"get\"</span>:<span class=\"function\"><span class=\"keyword\">function</span>,</span></span><br><span class=\"line\"><span class=\"function\">      \"<span class=\"title\">post</span>\":<span class=\"title\">function</span></span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">  &#125;</span></span><br><span class=\"line\"><span class=\"function\">  \"<span class=\"title\">url2</span>\":</span>&#123;</span><br><span class=\"line\">    method:&#123;</span><br><span class=\"line\">      <span class=\"string\">\"get\"</span>:<span class=\"function\"><span class=\"keyword\">function</span>,</span></span><br><span class=\"line\"><span class=\"function\">      \"<span class=\"title\">post</span>\":<span class=\"title\">function</span></span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">children</span>:</span>&#123;</span><br><span class=\"line\">      <span class=\"string\">\"1\"</span>:&#123;</span><br><span class=\"line\">        method:&#123;</span><br><span class=\"line\">          <span class=\"string\">\"get\"</span>:<span class=\"function\"><span class=\"keyword\">function</span>,</span></span><br><span class=\"line\"><span class=\"function\">          \"<span class=\"title\">post</span>\":<span class=\"title\">function</span></span></span><br><span class=\"line\"><span class=\"function\">        &#125;</span></span><br><span class=\"line\"><span class=\"function\">      &#125;</span></span><br><span class=\"line\"><span class=\"function\">    &#125;</span></span><br><span class=\"line\"><span class=\"function\">  &#125;</span></span><br><span class=\"line\"><span class=\"function\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p> 上面的就是通过</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(<span class=\"string\">\"url\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">\"url\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">app.get(<span class=\"string\">\"url2\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">app.post(<span class=\"string\">\"url2\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">app.use(<span class=\"string\">\"url2\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</span><br><span class=\"line\">   app.get(<span class=\"string\">\"1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">   app.post(<span class=\"string\">\"1\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;&#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p> 所构造的数据格式。实际访问的就是”url”,”url2/1”。这两个地址，通过不同的方法访问会有不同的代码。</p>\n<p> 判断是否存在接口就是用routerpool[url][method][req.method]判断是否存在，以及通过调用的方法不同进行fucntion的选择。</p>\n<hr>\n<p> 以上就是当前我对自己写httpserver的一些思想，心得，理解。感谢阅读</p>\n<p> cheers！</p>"},{"title":"基于nodejs的web server II","date":"2017-01-26T12:57:46.000Z","_content":"在写上一篇博客的过程中，一边思考一边进行整体框架的构思，感觉思路很清晰，于是这几天过年的事情忙完了之后在今天下午进行了webserver的改进。\n\n比如对routepool数据结构的改进，对流程的进一步完善。\n\n<!--more-->\n\n### 路由流程的完善\n\n目前这个hexo的博客还是部署在github上，但是github的空间只有300m，如果以后一直写的话总会有一天空间不够，所以肯定是需要将博客部署到自己的服务器上面。这样的话就需要了解一下hexo的访问方式。\n\nhexo的博客编写起来结构有一些复杂，需要解析markdown进行html的生成。但是这部分我暂时还没有研究到，只是看了一下文件结构，感觉博客的主体思想就是使用模板，将markdown中的内容解析到模板当中，至于具体是如何生成暂时还没有了解。但是整体的思想了解了之后就知道如何将hexo生成的文件放在自己的服务器上能够被用户访问到。\n\n简单来说，想要实现上述效果只是需要在路由时进行静态资源的判断。也就是访问到路径所指向的文件夹时进行一次index.html是否存在的判断。\n\n由于在流程中多次需要用到文件存在的判断以及静态资源的读取，返回。所以将这两个环节抽象为两个函数。\n```javascript\nconst fileExist = function(pathname, existfn, unexistfn){\n    fs.exists(pathname, function(exist){\n        if(exist){\n            existfn();\n        }\n        else{\n            unexistfn();\n        }\n    })\n};\n\nconst staticFile = function(req,res,pathname,ext){\n    let raw = fs.createReadStream(pathname);\n    let acceptEncoding = req.headers['accept-encoding'] || \"\";\n    let matched = ext.match(headers.fileMatch);\n    let expires = new Date();\n    expires.setTime(expires.getTime() + headers.maxAge * 1000);\n    res.setHeader(\"Expires\", expires.toUTCString());\n    res.setHeader(\"Cache-Control\", \"max-age=\" + headers.maxAge);\n    //判断304\n    fs.stat(pathname, function (err, stat) {\n        if (err) {\n            console.log(err);\n        } else {\n            lastModified = stat.mtime.toUTCString();\n            res.setHeader(\"Last-Modified\", lastModified);\n            if (req.headers['if-modified-since'] && lastModified == req.headers['if-modified-since']) {\n                res.writeHead(304, \"Not Modified\");\n                res.end();\n            }\n            //如果不是304\n            else {\n                if (matched && acceptEncoding.match(/\\bgzip\\b/)) {\n                    res.writeHead(200, \"Ok\", {\n                        'Content-Encoding': 'gzip',\n                        'content-Type':header[matched[0]]\n                    });\n                    raw.pipe(zlib.createGzip()).pipe(res);\n\n                } else if (matched && acceptEncoding.match(/\\bdeflate\\b/)) {\n                    res.writeHead(200, \"Ok\", {\n                        'Content-Encoding': 'deflate',\n                        'content-Type':header[matched[0]]\n                    });\n                    raw.pipe(zlib.createDeflate()).pipe(res);\n                } else {\n                    res.writeHead(200, \"Ok\",{\n                        'content-Type':header[matched[0]]\n                    });\n                    raw.pipe(res);\n                }\n            }\n        }\n    });\n};\n```\n\n### 路由流程的控制\n\n编写完静态资源以及判断文件是否存在方法之后就要进行流程的控制了，代码如下：\n```javascript\nlet pathname = url.parse(req.url);\nlet pathN = pathname.pathname;\nlet ext = path.extname(pathN);\nlet headers = {\n    fileMatch: /^(gif|png|jpg|js|css|html)$/ig,\n    maxAge: 60 * 60\n};\next = ext ? ext.slice(1) : 'unknown:';\nif (ext.match(headers.fileMatch)) {\n    this.staticFile(req,res,pathN,ext);\n}\nelse{\n    res.send = function(obj,str){\n        if(str === 'json'){\n            res.writeHead(200,{'content-Type':'application/json'});\n            res.end(JSON.stringify(obj));\n        }\n    };\n    if(req.method === 'GET'){\n        req.query = querystring.parse(pathN.query);\n        that.router(req.method.toLowerCase(),pathN,req,res);\n    }\n    else if(req.method === 'POST'){\n        req.setEncoding('utf-8');\n        let postData = \"\",params;\n        req.addListener(\"data\", function (postDataChunk) {\n            postData += postDataChunk;\n        });\n        req.addListener(\"end\", function () {\n            params = querystring.parse(postData);\n            req.query = params;\n            that.router(req.method.toLowerCase(),pathN,req,res);\n        });\n    }\n}\n```\n这部分代码用于路由流程的控制，以及将get，post请求所发送的数据分别解析出来，get请求大部分情况下是在url中添加数据，而post请求则需要进行监听，因为是分段发送，至于为什么post请求是分段发送，我在百度中没有找到靠谱的答案，面试中也有被问到过，答得也不是特别满意，如果有知道的同学可以在下面留言，感谢。\n\n### routepool数据结构的设定\n\nroutepool是路由的根本，所以，将routepool设为私有属性，app的get,post,use方法的作用相当于routepool的setter，而app.route则相当于routepool的getter。\n```javascript\nconst fileExist = function(pathname, existfn, unexistfn){\n    fs.exists(pathname, function(exist){\n        if(exist){\n            existfn();\n        }\n        else{\n            unexistfn();\n        }\n    })\n};\nlet routerpool = {};\nlet pool = routerpool;\napp = {\n\tpost: function (str, callback) {\n        routerInit(str, pool);\n        pool[str][\"method\"][\"post\"] = callback;\n        return this;\n    },\n    get: function (str, callback) {\n        routerInit(str, pool);\n        pool[str][\"method\"][\"get\"] = callback;\n        return this;\n    },\n    use: function (str, callback) {\n        routerpool[str] = {};\n        routerpool[str][\"children\"] = {};\n        pool = routerpool[str][\"children\"];\n        callback();\n        pool = routerpool;\n        return this;\n    },\n    router: function (method, str, req, res) {\n        let callback;\n        let that = this;\n        if ((callback = routerExist(str,method))) {\n            callback(req,res);\n        }\n        else {\n            fileExist(\"public/view\"+str+\"/index.html\", function(){\n                staticFile(req,res,\"public/view\"+str+\"/index.html\",\"html\");\n            },function(){\n                if(routerpool[\"/404\"]){\n                    routerpool[\"/404\"][\"method\"][\"get\"](req, res);\n                }\n                else{\n                    res.writeHead(404, \"Not found\");\n                    res.end();\n                }\n            })\n        }\n    },\n}\n```\n目前use方法只能添加一层，且暂时没有添加通配符功能，通配符功能感觉有一些复杂，但是添加的话也应该是在router中进行添加路由匹配的另一种规则。\n\n以上就是我对于web server的一些尝试，欢迎感兴趣的同学一起来讨论。感谢阅读\n\ncheers！","source":"_posts/nodejs-webserver-ii.md","raw":"---\ntitle: 基于nodejs的web server II\ndate: 2017-01-26 20:57:46\ncategories: 技术\ntags: nodejs\n---\n在写上一篇博客的过程中，一边思考一边进行整体框架的构思，感觉思路很清晰，于是这几天过年的事情忙完了之后在今天下午进行了webserver的改进。\n\n比如对routepool数据结构的改进，对流程的进一步完善。\n\n<!--more-->\n\n### 路由流程的完善\n\n目前这个hexo的博客还是部署在github上，但是github的空间只有300m，如果以后一直写的话总会有一天空间不够，所以肯定是需要将博客部署到自己的服务器上面。这样的话就需要了解一下hexo的访问方式。\n\nhexo的博客编写起来结构有一些复杂，需要解析markdown进行html的生成。但是这部分我暂时还没有研究到，只是看了一下文件结构，感觉博客的主体思想就是使用模板，将markdown中的内容解析到模板当中，至于具体是如何生成暂时还没有了解。但是整体的思想了解了之后就知道如何将hexo生成的文件放在自己的服务器上能够被用户访问到。\n\n简单来说，想要实现上述效果只是需要在路由时进行静态资源的判断。也就是访问到路径所指向的文件夹时进行一次index.html是否存在的判断。\n\n由于在流程中多次需要用到文件存在的判断以及静态资源的读取，返回。所以将这两个环节抽象为两个函数。\n```javascript\nconst fileExist = function(pathname, existfn, unexistfn){\n    fs.exists(pathname, function(exist){\n        if(exist){\n            existfn();\n        }\n        else{\n            unexistfn();\n        }\n    })\n};\n\nconst staticFile = function(req,res,pathname,ext){\n    let raw = fs.createReadStream(pathname);\n    let acceptEncoding = req.headers['accept-encoding'] || \"\";\n    let matched = ext.match(headers.fileMatch);\n    let expires = new Date();\n    expires.setTime(expires.getTime() + headers.maxAge * 1000);\n    res.setHeader(\"Expires\", expires.toUTCString());\n    res.setHeader(\"Cache-Control\", \"max-age=\" + headers.maxAge);\n    //判断304\n    fs.stat(pathname, function (err, stat) {\n        if (err) {\n            console.log(err);\n        } else {\n            lastModified = stat.mtime.toUTCString();\n            res.setHeader(\"Last-Modified\", lastModified);\n            if (req.headers['if-modified-since'] && lastModified == req.headers['if-modified-since']) {\n                res.writeHead(304, \"Not Modified\");\n                res.end();\n            }\n            //如果不是304\n            else {\n                if (matched && acceptEncoding.match(/\\bgzip\\b/)) {\n                    res.writeHead(200, \"Ok\", {\n                        'Content-Encoding': 'gzip',\n                        'content-Type':header[matched[0]]\n                    });\n                    raw.pipe(zlib.createGzip()).pipe(res);\n\n                } else if (matched && acceptEncoding.match(/\\bdeflate\\b/)) {\n                    res.writeHead(200, \"Ok\", {\n                        'Content-Encoding': 'deflate',\n                        'content-Type':header[matched[0]]\n                    });\n                    raw.pipe(zlib.createDeflate()).pipe(res);\n                } else {\n                    res.writeHead(200, \"Ok\",{\n                        'content-Type':header[matched[0]]\n                    });\n                    raw.pipe(res);\n                }\n            }\n        }\n    });\n};\n```\n\n### 路由流程的控制\n\n编写完静态资源以及判断文件是否存在方法之后就要进行流程的控制了，代码如下：\n```javascript\nlet pathname = url.parse(req.url);\nlet pathN = pathname.pathname;\nlet ext = path.extname(pathN);\nlet headers = {\n    fileMatch: /^(gif|png|jpg|js|css|html)$/ig,\n    maxAge: 60 * 60\n};\next = ext ? ext.slice(1) : 'unknown:';\nif (ext.match(headers.fileMatch)) {\n    this.staticFile(req,res,pathN,ext);\n}\nelse{\n    res.send = function(obj,str){\n        if(str === 'json'){\n            res.writeHead(200,{'content-Type':'application/json'});\n            res.end(JSON.stringify(obj));\n        }\n    };\n    if(req.method === 'GET'){\n        req.query = querystring.parse(pathN.query);\n        that.router(req.method.toLowerCase(),pathN,req,res);\n    }\n    else if(req.method === 'POST'){\n        req.setEncoding('utf-8');\n        let postData = \"\",params;\n        req.addListener(\"data\", function (postDataChunk) {\n            postData += postDataChunk;\n        });\n        req.addListener(\"end\", function () {\n            params = querystring.parse(postData);\n            req.query = params;\n            that.router(req.method.toLowerCase(),pathN,req,res);\n        });\n    }\n}\n```\n这部分代码用于路由流程的控制，以及将get，post请求所发送的数据分别解析出来，get请求大部分情况下是在url中添加数据，而post请求则需要进行监听，因为是分段发送，至于为什么post请求是分段发送，我在百度中没有找到靠谱的答案，面试中也有被问到过，答得也不是特别满意，如果有知道的同学可以在下面留言，感谢。\n\n### routepool数据结构的设定\n\nroutepool是路由的根本，所以，将routepool设为私有属性，app的get,post,use方法的作用相当于routepool的setter，而app.route则相当于routepool的getter。\n```javascript\nconst fileExist = function(pathname, existfn, unexistfn){\n    fs.exists(pathname, function(exist){\n        if(exist){\n            existfn();\n        }\n        else{\n            unexistfn();\n        }\n    })\n};\nlet routerpool = {};\nlet pool = routerpool;\napp = {\n\tpost: function (str, callback) {\n        routerInit(str, pool);\n        pool[str][\"method\"][\"post\"] = callback;\n        return this;\n    },\n    get: function (str, callback) {\n        routerInit(str, pool);\n        pool[str][\"method\"][\"get\"] = callback;\n        return this;\n    },\n    use: function (str, callback) {\n        routerpool[str] = {};\n        routerpool[str][\"children\"] = {};\n        pool = routerpool[str][\"children\"];\n        callback();\n        pool = routerpool;\n        return this;\n    },\n    router: function (method, str, req, res) {\n        let callback;\n        let that = this;\n        if ((callback = routerExist(str,method))) {\n            callback(req,res);\n        }\n        else {\n            fileExist(\"public/view\"+str+\"/index.html\", function(){\n                staticFile(req,res,\"public/view\"+str+\"/index.html\",\"html\");\n            },function(){\n                if(routerpool[\"/404\"]){\n                    routerpool[\"/404\"][\"method\"][\"get\"](req, res);\n                }\n                else{\n                    res.writeHead(404, \"Not found\");\n                    res.end();\n                }\n            })\n        }\n    },\n}\n```\n目前use方法只能添加一层，且暂时没有添加通配符功能，通配符功能感觉有一些复杂，但是添加的话也应该是在router中进行添加路由匹配的另一种规则。\n\n以上就是我对于web server的一些尝试，欢迎感兴趣的同学一起来讨论。感谢阅读\n\ncheers！","slug":"nodejs-webserver-ii","published":1,"updated":"2018-09-26T07:23:21.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmjywgue000c1l3hrwak0k95","content":"<p>在写上一篇博客的过程中，一边思考一边进行整体框架的构思，感觉思路很清晰，于是这几天过年的事情忙完了之后在今天下午进行了webserver的改进。</p>\n<p>比如对routepool数据结构的改进，对流程的进一步完善。</p>\n<a id=\"more\"></a>\n<h3 id=\"路由流程的完善\"><a href=\"#路由流程的完善\" class=\"headerlink\" title=\"路由流程的完善\"></a>路由流程的完善</h3><p>目前这个hexo的博客还是部署在github上，但是github的空间只有300m，如果以后一直写的话总会有一天空间不够，所以肯定是需要将博客部署到自己的服务器上面。这样的话就需要了解一下hexo的访问方式。</p>\n<p>hexo的博客编写起来结构有一些复杂，需要解析markdown进行html的生成。但是这部分我暂时还没有研究到，只是看了一下文件结构，感觉博客的主体思想就是使用模板，将markdown中的内容解析到模板当中，至于具体是如何生成暂时还没有了解。但是整体的思想了解了之后就知道如何将hexo生成的文件放在自己的服务器上能够被用户访问到。</p>\n<p>简单来说，想要实现上述效果只是需要在路由时进行静态资源的判断。也就是访问到路径所指向的文件夹时进行一次index.html是否存在的判断。</p>\n<p>由于在流程中多次需要用到文件存在的判断以及静态资源的读取，返回。所以将这两个环节抽象为两个函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fileExist = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pathname, existfn, unexistfn</span>)</span>&#123;</span><br><span class=\"line\">    fs.exists(pathname, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exist</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exist)&#123;</span><br><span class=\"line\">            existfn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            unexistfn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> staticFile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,pathname,ext</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> raw = fs.createReadStream(pathname);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> acceptEncoding = req.headers[<span class=\"string\">'accept-encoding'</span>] || <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> matched = ext.match(headers.fileMatch);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> expires = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    expires.setTime(expires.getTime() + headers.maxAge * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    res.setHeader(<span class=\"string\">\"Expires\"</span>, expires.toUTCString());</span><br><span class=\"line\">    res.setHeader(<span class=\"string\">\"Cache-Control\"</span>, <span class=\"string\">\"max-age=\"</span> + headers.maxAge);</span><br><span class=\"line\">    <span class=\"comment\">//判断304</span></span><br><span class=\"line\">    fs.stat(pathname, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stat</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            lastModified = stat.mtime.toUTCString();</span><br><span class=\"line\">            res.setHeader(<span class=\"string\">\"Last-Modified\"</span>, lastModified);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (req.headers[<span class=\"string\">'if-modified-since'</span>] &amp;&amp; lastModified == req.headers[<span class=\"string\">'if-modified-since'</span>]) &#123;</span><br><span class=\"line\">                res.writeHead(<span class=\"number\">304</span>, <span class=\"string\">\"Not Modified\"</span>);</span><br><span class=\"line\">                res.end();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果不是304</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (matched &amp;&amp; acceptEncoding.match(<span class=\"regexp\">/\\bgzip\\b/</span>)) &#123;</span><br><span class=\"line\">                    res.writeHead(<span class=\"number\">200</span>, <span class=\"string\">\"Ok\"</span>, &#123;</span><br><span class=\"line\">                        <span class=\"string\">'Content-Encoding'</span>: <span class=\"string\">'gzip'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'content-Type'</span>:header[matched[<span class=\"number\">0</span>]]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    raw.pipe(zlib.createGzip()).pipe(res);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (matched &amp;&amp; acceptEncoding.match(<span class=\"regexp\">/\\bdeflate\\b/</span>)) &#123;</span><br><span class=\"line\">                    res.writeHead(<span class=\"number\">200</span>, <span class=\"string\">\"Ok\"</span>, &#123;</span><br><span class=\"line\">                        <span class=\"string\">'Content-Encoding'</span>: <span class=\"string\">'deflate'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'content-Type'</span>:header[matched[<span class=\"number\">0</span>]]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    raw.pipe(zlib.createDeflate()).pipe(res);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res.writeHead(<span class=\"number\">200</span>, <span class=\"string\">\"Ok\"</span>,&#123;</span><br><span class=\"line\">                        <span class=\"string\">'content-Type'</span>:header[matched[<span class=\"number\">0</span>]]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    raw.pipe(res);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"路由流程的控制\"><a href=\"#路由流程的控制\" class=\"headerlink\" title=\"路由流程的控制\"></a>路由流程的控制</h3><p>编写完静态资源以及判断文件是否存在方法之后就要进行流程的控制了，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pathname = url.parse(req.url);</span><br><span class=\"line\"><span class=\"keyword\">let</span> pathN = pathname.pathname;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ext = path.extname(pathN);</span><br><span class=\"line\"><span class=\"keyword\">let</span> headers = &#123;</span><br><span class=\"line\">    fileMatch: <span class=\"regexp\">/^(gif|png|jpg|js|css|html)$/ig</span>,</span><br><span class=\"line\">    maxAge: <span class=\"number\">60</span> * <span class=\"number\">60</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ext = ext ? ext.slice(<span class=\"number\">1</span>) : <span class=\"string\">'unknown:'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ext.match(headers.fileMatch)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.staticFile(req,res,pathN,ext);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    res.send = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj,str</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str === <span class=\"string\">'json'</span>)&#123;</span><br><span class=\"line\">            res.writeHead(<span class=\"number\">200</span>,&#123;<span class=\"string\">'content-Type'</span>:<span class=\"string\">'application/json'</span>&#125;);</span><br><span class=\"line\">            res.end(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.method === <span class=\"string\">'GET'</span>)&#123;</span><br><span class=\"line\">        req.query = querystring.parse(pathN.query);</span><br><span class=\"line\">        that.router(req.method.toLowerCase(),pathN,req,res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.method === <span class=\"string\">'POST'</span>)&#123;</span><br><span class=\"line\">        req.setEncoding(<span class=\"string\">'utf-8'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> postData = <span class=\"string\">\"\"</span>,params;</span><br><span class=\"line\">        req.addListener(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">postDataChunk</span>) </span>&#123;</span><br><span class=\"line\">            postData += postDataChunk;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        req.addListener(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            params = querystring.parse(postData);</span><br><span class=\"line\">            req.query = params;</span><br><span class=\"line\">            that.router(req.method.toLowerCase(),pathN,req,res);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这部分代码用于路由流程的控制，以及将get，post请求所发送的数据分别解析出来，get请求大部分情况下是在url中添加数据，而post请求则需要进行监听，因为是分段发送，至于为什么post请求是分段发送，我在百度中没有找到靠谱的答案，面试中也有被问到过，答得也不是特别满意，如果有知道的同学可以在下面留言，感谢。</p>\n<h3 id=\"routepool数据结构的设定\"><a href=\"#routepool数据结构的设定\" class=\"headerlink\" title=\"routepool数据结构的设定\"></a>routepool数据结构的设定</h3><p>routepool是路由的根本，所以，将routepool设为私有属性，app的get,post,use方法的作用相当于routepool的setter，而app.route则相当于routepool的getter。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fileExist = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pathname, existfn, unexistfn</span>)</span>&#123;</span><br><span class=\"line\">    fs.exists(pathname, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exist</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exist)&#123;</span><br><span class=\"line\">            existfn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            unexistfn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> routerpool = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pool = routerpool;</span><br><span class=\"line\">app = &#123;</span><br><span class=\"line\">\tpost: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, callback</span>) </span>&#123;</span><br><span class=\"line\">        routerInit(str, pool);</span><br><span class=\"line\">        pool[str][<span class=\"string\">\"method\"</span>][<span class=\"string\">\"post\"</span>] = callback;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, callback</span>) </span>&#123;</span><br><span class=\"line\">        routerInit(str, pool);</span><br><span class=\"line\">        pool[str][<span class=\"string\">\"method\"</span>][<span class=\"string\">\"get\"</span>] = callback;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    use: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, callback</span>) </span>&#123;</span><br><span class=\"line\">        routerpool[str] = &#123;&#125;;</span><br><span class=\"line\">        routerpool[str][<span class=\"string\">\"children\"</span>] = &#123;&#125;;</span><br><span class=\"line\">        pool = routerpool[str][<span class=\"string\">\"children\"</span>];</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">        pool = routerpool;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method, str, req, res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> callback;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((callback = routerExist(str,method))) &#123;</span><br><span class=\"line\">            callback(req,res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fileExist(<span class=\"string\">\"public/view\"</span>+str+<span class=\"string\">\"/index.html\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                staticFile(req,res,<span class=\"string\">\"public/view\"</span>+str+<span class=\"string\">\"/index.html\"</span>,<span class=\"string\">\"html\"</span>);</span><br><span class=\"line\">            &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(routerpool[<span class=\"string\">\"/404\"</span>])&#123;</span><br><span class=\"line\">                    routerpool[<span class=\"string\">\"/404\"</span>][<span class=\"string\">\"method\"</span>][<span class=\"string\">\"get\"</span>](req, res);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    res.writeHead(<span class=\"number\">404</span>, <span class=\"string\">\"Not found\"</span>);</span><br><span class=\"line\">                    res.end();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>目前use方法只能添加一层，且暂时没有添加通配符功能，通配符功能感觉有一些复杂，但是添加的话也应该是在router中进行添加路由匹配的另一种规则。</p>\n<p>以上就是我对于web server的一些尝试，欢迎感兴趣的同学一起来讨论。感谢阅读</p>\n<p>cheers！</p>\n","site":{"data":{}},"excerpt":"<p>在写上一篇博客的过程中，一边思考一边进行整体框架的构思，感觉思路很清晰，于是这几天过年的事情忙完了之后在今天下午进行了webserver的改进。</p>\n<p>比如对routepool数据结构的改进，对流程的进一步完善。</p>","more":"<h3 id=\"路由流程的完善\"><a href=\"#路由流程的完善\" class=\"headerlink\" title=\"路由流程的完善\"></a>路由流程的完善</h3><p>目前这个hexo的博客还是部署在github上，但是github的空间只有300m，如果以后一直写的话总会有一天空间不够，所以肯定是需要将博客部署到自己的服务器上面。这样的话就需要了解一下hexo的访问方式。</p>\n<p>hexo的博客编写起来结构有一些复杂，需要解析markdown进行html的生成。但是这部分我暂时还没有研究到，只是看了一下文件结构，感觉博客的主体思想就是使用模板，将markdown中的内容解析到模板当中，至于具体是如何生成暂时还没有了解。但是整体的思想了解了之后就知道如何将hexo生成的文件放在自己的服务器上能够被用户访问到。</p>\n<p>简单来说，想要实现上述效果只是需要在路由时进行静态资源的判断。也就是访问到路径所指向的文件夹时进行一次index.html是否存在的判断。</p>\n<p>由于在流程中多次需要用到文件存在的判断以及静态资源的读取，返回。所以将这两个环节抽象为两个函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fileExist = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pathname, existfn, unexistfn</span>)</span>&#123;</span><br><span class=\"line\">    fs.exists(pathname, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exist</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exist)&#123;</span><br><span class=\"line\">            existfn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            unexistfn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> staticFile = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res,pathname,ext</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> raw = fs.createReadStream(pathname);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> acceptEncoding = req.headers[<span class=\"string\">'accept-encoding'</span>] || <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> matched = ext.match(headers.fileMatch);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> expires = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">    expires.setTime(expires.getTime() + headers.maxAge * <span class=\"number\">1000</span>);</span><br><span class=\"line\">    res.setHeader(<span class=\"string\">\"Expires\"</span>, expires.toUTCString());</span><br><span class=\"line\">    res.setHeader(<span class=\"string\">\"Cache-Control\"</span>, <span class=\"string\">\"max-age=\"</span> + headers.maxAge);</span><br><span class=\"line\">    <span class=\"comment\">//判断304</span></span><br><span class=\"line\">    fs.stat(pathname, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, stat</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            lastModified = stat.mtime.toUTCString();</span><br><span class=\"line\">            res.setHeader(<span class=\"string\">\"Last-Modified\"</span>, lastModified);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (req.headers[<span class=\"string\">'if-modified-since'</span>] &amp;&amp; lastModified == req.headers[<span class=\"string\">'if-modified-since'</span>]) &#123;</span><br><span class=\"line\">                res.writeHead(<span class=\"number\">304</span>, <span class=\"string\">\"Not Modified\"</span>);</span><br><span class=\"line\">                res.end();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//如果不是304</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (matched &amp;&amp; acceptEncoding.match(<span class=\"regexp\">/\\bgzip\\b/</span>)) &#123;</span><br><span class=\"line\">                    res.writeHead(<span class=\"number\">200</span>, <span class=\"string\">\"Ok\"</span>, &#123;</span><br><span class=\"line\">                        <span class=\"string\">'Content-Encoding'</span>: <span class=\"string\">'gzip'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'content-Type'</span>:header[matched[<span class=\"number\">0</span>]]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    raw.pipe(zlib.createGzip()).pipe(res);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (matched &amp;&amp; acceptEncoding.match(<span class=\"regexp\">/\\bdeflate\\b/</span>)) &#123;</span><br><span class=\"line\">                    res.writeHead(<span class=\"number\">200</span>, <span class=\"string\">\"Ok\"</span>, &#123;</span><br><span class=\"line\">                        <span class=\"string\">'Content-Encoding'</span>: <span class=\"string\">'deflate'</span>,</span><br><span class=\"line\">                        <span class=\"string\">'content-Type'</span>:header[matched[<span class=\"number\">0</span>]]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    raw.pipe(zlib.createDeflate()).pipe(res);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    res.writeHead(<span class=\"number\">200</span>, <span class=\"string\">\"Ok\"</span>,&#123;</span><br><span class=\"line\">                        <span class=\"string\">'content-Type'</span>:header[matched[<span class=\"number\">0</span>]]</span><br><span class=\"line\">                    &#125;);</span><br><span class=\"line\">                    raw.pipe(res);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"路由流程的控制\"><a href=\"#路由流程的控制\" class=\"headerlink\" title=\"路由流程的控制\"></a>路由流程的控制</h3><p>编写完静态资源以及判断文件是否存在方法之后就要进行流程的控制了，代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> pathname = url.parse(req.url);</span><br><span class=\"line\"><span class=\"keyword\">let</span> pathN = pathname.pathname;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ext = path.extname(pathN);</span><br><span class=\"line\"><span class=\"keyword\">let</span> headers = &#123;</span><br><span class=\"line\">    fileMatch: <span class=\"regexp\">/^(gif|png|jpg|js|css|html)$/ig</span>,</span><br><span class=\"line\">    maxAge: <span class=\"number\">60</span> * <span class=\"number\">60</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">ext = ext ? ext.slice(<span class=\"number\">1</span>) : <span class=\"string\">'unknown:'</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (ext.match(headers.fileMatch)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.staticFile(req,res,pathN,ext);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    res.send = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj,str</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str === <span class=\"string\">'json'</span>)&#123;</span><br><span class=\"line\">            res.writeHead(<span class=\"number\">200</span>,&#123;<span class=\"string\">'content-Type'</span>:<span class=\"string\">'application/json'</span>&#125;);</span><br><span class=\"line\">            res.end(<span class=\"built_in\">JSON</span>.stringify(obj));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(req.method === <span class=\"string\">'GET'</span>)&#123;</span><br><span class=\"line\">        req.query = querystring.parse(pathN.query);</span><br><span class=\"line\">        that.router(req.method.toLowerCase(),pathN,req,res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(req.method === <span class=\"string\">'POST'</span>)&#123;</span><br><span class=\"line\">        req.setEncoding(<span class=\"string\">'utf-8'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> postData = <span class=\"string\">\"\"</span>,params;</span><br><span class=\"line\">        req.addListener(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">postDataChunk</span>) </span>&#123;</span><br><span class=\"line\">            postData += postDataChunk;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        req.addListener(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            params = querystring.parse(postData);</span><br><span class=\"line\">            req.query = params;</span><br><span class=\"line\">            that.router(req.method.toLowerCase(),pathN,req,res);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这部分代码用于路由流程的控制，以及将get，post请求所发送的数据分别解析出来，get请求大部分情况下是在url中添加数据，而post请求则需要进行监听，因为是分段发送，至于为什么post请求是分段发送，我在百度中没有找到靠谱的答案，面试中也有被问到过，答得也不是特别满意，如果有知道的同学可以在下面留言，感谢。</p>\n<h3 id=\"routepool数据结构的设定\"><a href=\"#routepool数据结构的设定\" class=\"headerlink\" title=\"routepool数据结构的设定\"></a>routepool数据结构的设定</h3><p>routepool是路由的根本，所以，将routepool设为私有属性，app的get,post,use方法的作用相当于routepool的setter，而app.route则相当于routepool的getter。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fileExist = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pathname, existfn, unexistfn</span>)</span>&#123;</span><br><span class=\"line\">    fs.exists(pathname, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exist</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(exist)&#123;</span><br><span class=\"line\">            existfn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            unexistfn();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> routerpool = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pool = routerpool;</span><br><span class=\"line\">app = &#123;</span><br><span class=\"line\">\tpost: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, callback</span>) </span>&#123;</span><br><span class=\"line\">        routerInit(str, pool);</span><br><span class=\"line\">        pool[str][<span class=\"string\">\"method\"</span>][<span class=\"string\">\"post\"</span>] = callback;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    get: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, callback</span>) </span>&#123;</span><br><span class=\"line\">        routerInit(str, pool);</span><br><span class=\"line\">        pool[str][<span class=\"string\">\"method\"</span>][<span class=\"string\">\"get\"</span>] = callback;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    use: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">str, callback</span>) </span>&#123;</span><br><span class=\"line\">        routerpool[str] = &#123;&#125;;</span><br><span class=\"line\">        routerpool[str][<span class=\"string\">\"children\"</span>] = &#123;&#125;;</span><br><span class=\"line\">        pool = routerpool[str][<span class=\"string\">\"children\"</span>];</span><br><span class=\"line\">        callback();</span><br><span class=\"line\">        pool = routerpool;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    router: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">method, str, req, res</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> callback;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((callback = routerExist(str,method))) &#123;</span><br><span class=\"line\">            callback(req,res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            fileExist(<span class=\"string\">\"public/view\"</span>+str+<span class=\"string\">\"/index.html\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                staticFile(req,res,<span class=\"string\">\"public/view\"</span>+str+<span class=\"string\">\"/index.html\"</span>,<span class=\"string\">\"html\"</span>);</span><br><span class=\"line\">            &#125;,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(routerpool[<span class=\"string\">\"/404\"</span>])&#123;</span><br><span class=\"line\">                    routerpool[<span class=\"string\">\"/404\"</span>][<span class=\"string\">\"method\"</span>][<span class=\"string\">\"get\"</span>](req, res);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    res.writeHead(<span class=\"number\">404</span>, <span class=\"string\">\"Not found\"</span>);</span><br><span class=\"line\">                    res.end();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>目前use方法只能添加一层，且暂时没有添加通配符功能，通配符功能感觉有一些复杂，但是添加的话也应该是在router中进行添加路由匹配的另一种规则。</p>\n<p>以上就是我对于web server的一些尝试，欢迎感兴趣的同学一起来讨论。感谢阅读</p>\n<p>cheers！</p>"},{"title":"tkinter学习之路","date":"2018-08-13T08:32:55.000Z","_content":"\n最近由于工作需要，自学了tkinter的一些东西，在使用过程中遇到了一些问题，现记录下来。\n\n<!-- more -->\n\n# tkinter的使用示例代码\n\n```python\nimport Tkinter as tk\n\nwindow = tk.TK()\nlabel = tk.Label(window, text='Hello world')\nlabel.pack()\nwindow.mainloop()\n\n```\n\n当然了，这段代码是最最简单的几行代码（而且很容易运行了看不到效果，因为gui窗口太小了找不到，我当时\n就没看到，还以为是运行出错了，又没看到错误提示。唉）\n\n# tkinter实现动画效果\n\n## tkinter运行的几个状态\n\n### 创建\n\n```python\nwindow = tk.Tk()\nlabel = tk.Label(window, text='hello world')\n```\n顾名思义，这个阶段是创建各个组件以及进行各种绑定的阶段，在这个阶段不会生成gui的窗口。\n\n在这个阶段需要做的有：gui组件的创建，事件监听的绑定，动画效果的创建\n\n### 布局\n\n作为一个jser，还是更加喜欢用布局这个词\n\n```python\nlabel.pack() || lable.grid() || label.place()\n```\n\n这三个函数分别对应三种不同的布局方式，可以混合使用。\n\n### 事件循环\n\n在创建了窗口之后会执行动画函数，执行了动画函数之后就会进入mainloop，这个也是我觉的tkinter最。。。\n难受的一个机制，江湖人称事件循环态。\n\n在进入了事件循环态后，只有触发了事件才可以进行ui刷新。也就是说，这个阶段不会有类似前端中banner的动画\n\n所以，如果想要有一个什么动画的话，只能通过两种方式，第一种是在mainloop之前通过使用label.after设置一个更新ui的timer；第二种就是通过触发事件的回调函数进行动画的编写，而且，递归无效。。。也就是说，通过回调函数写动画只能通过循环+sleep的方式。\n\nemmm反正就是这么牛批，而且我觉得tkinter是我见过的最丑的gui界面= =。因为自己可以设置的属性相对不多，但是却很实用，而且相对来说学习起来比较快，容易上手，优点与缺点同样明显，所以也就忍了吧。\n\n## 动画效果的实现\n\n```python\nlabel.after(interval, func)\n\nmainloop()\n```\n\n一句话，使用递归，在func内部重新调用after函数，出了递归之后，窗口就会进入事件循环态，非常坑爹。\n\n差不多就总结了这些，see u\n","source":"_posts/something-about-tkinter.md","raw":"---\ntitle: tkinter学习之路\ndate: 2018-08-13 16:32:55\ncategories: 技术\ntags: ['Python','tkinter']\n---\n\n最近由于工作需要，自学了tkinter的一些东西，在使用过程中遇到了一些问题，现记录下来。\n\n<!-- more -->\n\n# tkinter的使用示例代码\n\n```python\nimport Tkinter as tk\n\nwindow = tk.TK()\nlabel = tk.Label(window, text='Hello world')\nlabel.pack()\nwindow.mainloop()\n\n```\n\n当然了，这段代码是最最简单的几行代码（而且很容易运行了看不到效果，因为gui窗口太小了找不到，我当时\n就没看到，还以为是运行出错了，又没看到错误提示。唉）\n\n# tkinter实现动画效果\n\n## tkinter运行的几个状态\n\n### 创建\n\n```python\nwindow = tk.Tk()\nlabel = tk.Label(window, text='hello world')\n```\n顾名思义，这个阶段是创建各个组件以及进行各种绑定的阶段，在这个阶段不会生成gui的窗口。\n\n在这个阶段需要做的有：gui组件的创建，事件监听的绑定，动画效果的创建\n\n### 布局\n\n作为一个jser，还是更加喜欢用布局这个词\n\n```python\nlabel.pack() || lable.grid() || label.place()\n```\n\n这三个函数分别对应三种不同的布局方式，可以混合使用。\n\n### 事件循环\n\n在创建了窗口之后会执行动画函数，执行了动画函数之后就会进入mainloop，这个也是我觉的tkinter最。。。\n难受的一个机制，江湖人称事件循环态。\n\n在进入了事件循环态后，只有触发了事件才可以进行ui刷新。也就是说，这个阶段不会有类似前端中banner的动画\n\n所以，如果想要有一个什么动画的话，只能通过两种方式，第一种是在mainloop之前通过使用label.after设置一个更新ui的timer；第二种就是通过触发事件的回调函数进行动画的编写，而且，递归无效。。。也就是说，通过回调函数写动画只能通过循环+sleep的方式。\n\nemmm反正就是这么牛批，而且我觉得tkinter是我见过的最丑的gui界面= =。因为自己可以设置的属性相对不多，但是却很实用，而且相对来说学习起来比较快，容易上手，优点与缺点同样明显，所以也就忍了吧。\n\n## 动画效果的实现\n\n```python\nlabel.after(interval, func)\n\nmainloop()\n```\n\n一句话，使用递归，在func内部重新调用after函数，出了递归之后，窗口就会进入事件循环态，非常坑爹。\n\n差不多就总结了这些，see u\n","slug":"something-about-tkinter","published":1,"updated":"2018-09-26T07:23:21.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmjywgug000d1l3h51646eoc","content":"<p>最近由于工作需要，自学了tkinter的一些东西，在使用过程中遇到了一些问题，现记录下来。</p>\n<a id=\"more\"></a>\n<h1 id=\"tkinter的使用示例代码\"><a href=\"#tkinter的使用示例代码\" class=\"headerlink\" title=\"tkinter的使用示例代码\"></a>tkinter的使用示例代码</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"></span><br><span class=\"line\">window = tk.TK()</span><br><span class=\"line\">label = tk.Label(window, text=<span class=\"string\">'Hello world'</span>)</span><br><span class=\"line\">label.pack()</span><br><span class=\"line\">window.mainloop()</span><br></pre></td></tr></table></figure>\n<p>当然了，这段代码是最最简单的几行代码（而且很容易运行了看不到效果，因为gui窗口太小了找不到，我当时<br>就没看到，还以为是运行出错了，又没看到错误提示。唉）</p>\n<h1 id=\"tkinter实现动画效果\"><a href=\"#tkinter实现动画效果\" class=\"headerlink\" title=\"tkinter实现动画效果\"></a>tkinter实现动画效果</h1><h2 id=\"tkinter运行的几个状态\"><a href=\"#tkinter运行的几个状态\" class=\"headerlink\" title=\"tkinter运行的几个状态\"></a>tkinter运行的几个状态</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window = tk.Tk()</span><br><span class=\"line\">label = tk.Label(window, text=<span class=\"string\">'hello world'</span>)</span><br></pre></td></tr></table></figure>\n<p>顾名思义，这个阶段是创建各个组件以及进行各种绑定的阶段，在这个阶段不会生成gui的窗口。</p>\n<p>在这个阶段需要做的有：gui组件的创建，事件监听的绑定，动画效果的创建</p>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><p>作为一个jser，还是更加喜欢用布局这个词</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label.pack() || lable.grid() || label.place()</span><br></pre></td></tr></table></figure>\n<p>这三个函数分别对应三种不同的布局方式，可以混合使用。</p>\n<h3 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h3><p>在创建了窗口之后会执行动画函数，执行了动画函数之后就会进入mainloop，这个也是我觉的tkinter最。。。<br>难受的一个机制，江湖人称事件循环态。</p>\n<p>在进入了事件循环态后，只有触发了事件才可以进行ui刷新。也就是说，这个阶段不会有类似前端中banner的动画</p>\n<p>所以，如果想要有一个什么动画的话，只能通过两种方式，第一种是在mainloop之前通过使用label.after设置一个更新ui的timer；第二种就是通过触发事件的回调函数进行动画的编写，而且，递归无效。。。也就是说，通过回调函数写动画只能通过循环+sleep的方式。</p>\n<p>emmm反正就是这么牛批，而且我觉得tkinter是我见过的最丑的gui界面= =。因为自己可以设置的属性相对不多，但是却很实用，而且相对来说学习起来比较快，容易上手，优点与缺点同样明显，所以也就忍了吧。</p>\n<h2 id=\"动画效果的实现\"><a href=\"#动画效果的实现\" class=\"headerlink\" title=\"动画效果的实现\"></a>动画效果的实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label.after(interval, func)</span><br><span class=\"line\"></span><br><span class=\"line\">mainloop()</span><br></pre></td></tr></table></figure>\n<p>一句话，使用递归，在func内部重新调用after函数，出了递归之后，窗口就会进入事件循环态，非常坑爹。</p>\n<p>差不多就总结了这些，see u</p>\n","site":{"data":{}},"excerpt":"<p>最近由于工作需要，自学了tkinter的一些东西，在使用过程中遇到了一些问题，现记录下来。</p>","more":"<h1 id=\"tkinter的使用示例代码\"><a href=\"#tkinter的使用示例代码\" class=\"headerlink\" title=\"tkinter的使用示例代码\"></a>tkinter的使用示例代码</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"></span><br><span class=\"line\">window = tk.TK()</span><br><span class=\"line\">label = tk.Label(window, text=<span class=\"string\">'Hello world'</span>)</span><br><span class=\"line\">label.pack()</span><br><span class=\"line\">window.mainloop()</span><br></pre></td></tr></table></figure>\n<p>当然了，这段代码是最最简单的几行代码（而且很容易运行了看不到效果，因为gui窗口太小了找不到，我当时<br>就没看到，还以为是运行出错了，又没看到错误提示。唉）</p>\n<h1 id=\"tkinter实现动画效果\"><a href=\"#tkinter实现动画效果\" class=\"headerlink\" title=\"tkinter实现动画效果\"></a>tkinter实现动画效果</h1><h2 id=\"tkinter运行的几个状态\"><a href=\"#tkinter运行的几个状态\" class=\"headerlink\" title=\"tkinter运行的几个状态\"></a>tkinter运行的几个状态</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window = tk.Tk()</span><br><span class=\"line\">label = tk.Label(window, text=<span class=\"string\">'hello world'</span>)</span><br></pre></td></tr></table></figure>\n<p>顾名思义，这个阶段是创建各个组件以及进行各种绑定的阶段，在这个阶段不会生成gui的窗口。</p>\n<p>在这个阶段需要做的有：gui组件的创建，事件监听的绑定，动画效果的创建</p>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><p>作为一个jser，还是更加喜欢用布局这个词</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label.pack() || lable.grid() || label.place()</span><br></pre></td></tr></table></figure>\n<p>这三个函数分别对应三种不同的布局方式，可以混合使用。</p>\n<h3 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h3><p>在创建了窗口之后会执行动画函数，执行了动画函数之后就会进入mainloop，这个也是我觉的tkinter最。。。<br>难受的一个机制，江湖人称事件循环态。</p>\n<p>在进入了事件循环态后，只有触发了事件才可以进行ui刷新。也就是说，这个阶段不会有类似前端中banner的动画</p>\n<p>所以，如果想要有一个什么动画的话，只能通过两种方式，第一种是在mainloop之前通过使用label.after设置一个更新ui的timer；第二种就是通过触发事件的回调函数进行动画的编写，而且，递归无效。。。也就是说，通过回调函数写动画只能通过循环+sleep的方式。</p>\n<p>emmm反正就是这么牛批，而且我觉得tkinter是我见过的最丑的gui界面= =。因为自己可以设置的属性相对不多，但是却很实用，而且相对来说学习起来比较快，容易上手，优点与缺点同样明显，所以也就忍了吧。</p>\n<h2 id=\"动画效果的实现\"><a href=\"#动画效果的实现\" class=\"headerlink\" title=\"动画效果的实现\"></a>动画效果的实现</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">label.after(interval, func)</span><br><span class=\"line\"></span><br><span class=\"line\">mainloop()</span><br></pre></td></tr></table></figure>\n<p>一句话，使用递归，在func内部重新调用after函数，出了递归之后，窗口就会进入事件循环态，非常坑爹。</p>\n<p>差不多就总结了这些，see u</p>"},{"title":"tkinter学习之路（二）","date":"2018-08-22T02:59:23.000Z","_content":"\n上节书说道，使用after作为实现动画的方式，但是这种方式的弊病有很多，所以又找到了另外的一种实现方式。\n\n在mainloop函数的解释中说道，在mainloop之后只有触发了事件才会更新ui，也就是相当于每次触发事件都会repaint整个界面。\n\n于是我们可以通过以下方式进行动画的编写。\n\n<!--more-->\n\n# 动画\n```python\nimport Tkinter as tk\n\ndef animation():\n    label.configure(text=index)\nif __name__ == '__main__':\n    root = tk.Tk()\n    label = tk.Label(root,text='test')\n    # bing event \n    label.bind('<<Animation>>', animation)\n    label.pack()\n    root.mainloop()\n    for i in range(10):\n        index = i\n        # use event_generate\n        label.event_generate('<<Animation>>')\n\n```\n\n使用这个方式触发事件进行更新ui与after方式相比，性能更优，更新更精准，并且可以通过index进行精确更新。\n\n# 自适应实现思想\n\n## 使用gird\n\n一种自适应思想就是使用grid进行布局，grid在我的理解里面和前端的table布局差不多。不多聊\n\n## 使用root.bind('<Configure>', cb)\n\n使用事件循环进行监听window的configure事件，使用回调函数进行更新。适用于使用place布局的一些app。\n\n我自己的实现方式大概是写一个get_position的func，每次resize都去调用一次进行重绘。如果对于性能要求较高可以考虑使用节流。\n\n目前的一些使用到的技术就是这些，在此记录\n","source":"_posts/tkinter-in-my-view.md","raw":"---\ntitle: tkinter学习之路（二）\ndate: 2018-08-22 10:59:23\ncategories: 技术\ntags: ['python', 'gui']\n---\n\n上节书说道，使用after作为实现动画的方式，但是这种方式的弊病有很多，所以又找到了另外的一种实现方式。\n\n在mainloop函数的解释中说道，在mainloop之后只有触发了事件才会更新ui，也就是相当于每次触发事件都会repaint整个界面。\n\n于是我们可以通过以下方式进行动画的编写。\n\n<!--more-->\n\n# 动画\n```python\nimport Tkinter as tk\n\ndef animation():\n    label.configure(text=index)\nif __name__ == '__main__':\n    root = tk.Tk()\n    label = tk.Label(root,text='test')\n    # bing event \n    label.bind('<<Animation>>', animation)\n    label.pack()\n    root.mainloop()\n    for i in range(10):\n        index = i\n        # use event_generate\n        label.event_generate('<<Animation>>')\n\n```\n\n使用这个方式触发事件进行更新ui与after方式相比，性能更优，更新更精准，并且可以通过index进行精确更新。\n\n# 自适应实现思想\n\n## 使用gird\n\n一种自适应思想就是使用grid进行布局，grid在我的理解里面和前端的table布局差不多。不多聊\n\n## 使用root.bind('<Configure>', cb)\n\n使用事件循环进行监听window的configure事件，使用回调函数进行更新。适用于使用place布局的一些app。\n\n我自己的实现方式大概是写一个get_position的func，每次resize都去调用一次进行重绘。如果对于性能要求较高可以考虑使用节流。\n\n目前的一些使用到的技术就是这些，在此记录\n","slug":"tkinter-in-my-view","published":1,"updated":"2018-09-26T07:23:21.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmjywguk000h1l3hi3yo6viz","content":"<p>上节书说道，使用after作为实现动画的方式，但是这种方式的弊病有很多，所以又找到了另外的一种实现方式。</p>\n<p>在mainloop函数的解释中说道，在mainloop之后只有触发了事件才会更新ui，也就是相当于每次触发事件都会repaint整个界面。</p>\n<p>于是我们可以通过以下方式进行动画的编写。</p>\n<a id=\"more\"></a>\n<h1 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animation</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    label.configure(text=index)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    root = tk.Tk()</span><br><span class=\"line\">    label = tk.Label(root,text=<span class=\"string\">'test'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># bing event </span></span><br><span class=\"line\">    label.bind(<span class=\"string\">'&lt;&lt;Animation&gt;&gt;'</span>, animation)</span><br><span class=\"line\">    label.pack()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        index = i</span><br><span class=\"line\">        <span class=\"comment\"># use event_generate</span></span><br><span class=\"line\">        label.event_generate(<span class=\"string\">'&lt;&lt;Animation&gt;&gt;'</span>)</span><br></pre></td></tr></table></figure>\n<p>使用这个方式触发事件进行更新ui与after方式相比，性能更优，更新更精准，并且可以通过index进行精确更新。</p>\n<h1 id=\"自适应实现思想\"><a href=\"#自适应实现思想\" class=\"headerlink\" title=\"自适应实现思想\"></a>自适应实现思想</h1><h2 id=\"使用gird\"><a href=\"#使用gird\" class=\"headerlink\" title=\"使用gird\"></a>使用gird</h2><p>一种自适应思想就是使用grid进行布局，grid在我的理解里面和前端的table布局差不多。不多聊</p>\n<h2 id=\"使用root-bind-‘‘-cb\"><a href=\"#使用root-bind-‘‘-cb\" class=\"headerlink\" title=\"使用root.bind(‘‘, cb)\"></a>使用root.bind(‘<configure>‘, cb)</configure></h2><p>使用事件循环进行监听window的configure事件，使用回调函数进行更新。适用于使用place布局的一些app。</p>\n<p>我自己的实现方式大概是写一个get_position的func，每次resize都去调用一次进行重绘。如果对于性能要求较高可以考虑使用节流。</p>\n<p>目前的一些使用到的技术就是这些，在此记录</p>\n","site":{"data":{}},"excerpt":"<p>上节书说道，使用after作为实现动画的方式，但是这种方式的弊病有很多，所以又找到了另外的一种实现方式。</p>\n<p>在mainloop函数的解释中说道，在mainloop之后只有触发了事件才会更新ui，也就是相当于每次触发事件都会repaint整个界面。</p>\n<p>于是我们可以通过以下方式进行动画的编写。</p>","more":"<h1 id=\"动画\"><a href=\"#动画\" class=\"headerlink\" title=\"动画\"></a>动画</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Tkinter <span class=\"keyword\">as</span> tk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">animation</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    label.configure(text=index)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    root = tk.Tk()</span><br><span class=\"line\">    label = tk.Label(root,text=<span class=\"string\">'test'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># bing event </span></span><br><span class=\"line\">    label.bind(<span class=\"string\">'&lt;&lt;Animation&gt;&gt;'</span>, animation)</span><br><span class=\"line\">    label.pack()</span><br><span class=\"line\">    root.mainloop()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">10</span>):</span><br><span class=\"line\">        index = i</span><br><span class=\"line\">        <span class=\"comment\"># use event_generate</span></span><br><span class=\"line\">        label.event_generate(<span class=\"string\">'&lt;&lt;Animation&gt;&gt;'</span>)</span><br></pre></td></tr></table></figure>\n<p>使用这个方式触发事件进行更新ui与after方式相比，性能更优，更新更精准，并且可以通过index进行精确更新。</p>\n<h1 id=\"自适应实现思想\"><a href=\"#自适应实现思想\" class=\"headerlink\" title=\"自适应实现思想\"></a>自适应实现思想</h1><h2 id=\"使用gird\"><a href=\"#使用gird\" class=\"headerlink\" title=\"使用gird\"></a>使用gird</h2><p>一种自适应思想就是使用grid进行布局，grid在我的理解里面和前端的table布局差不多。不多聊</p>\n<h2 id=\"使用root-bind-‘‘-cb\"><a href=\"#使用root-bind-‘‘-cb\" class=\"headerlink\" title=\"使用root.bind(‘‘, cb)\"></a>使用root.bind(‘<configure>‘, cb)</configure></h2><p>使用事件循环进行监听window的configure事件，使用回调函数进行更新。适用于使用place布局的一些app。</p>\n<p>我自己的实现方式大概是写一个get_position的func，每次resize都去调用一次进行重绘。如果对于性能要求较高可以考虑使用节流。</p>\n<p>目前的一些使用到的技术就是这些，在此记录</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjmjywgtl00001l3hj47imp6f","category_id":"cjmjywgu000041l3h9mplmcrj","_id":"cjmjywgui000e1l3hr0arf3jr"},{"post_id":"cjmjywgue000c1l3hrwak0k95","category_id":"cjmjywgu7000a1l3hmqti2i5o","_id":"cjmjywguu000j1l3hmy6wonej"},{"post_id":"cjmjywgts00021l3hksc9q49o","category_id":"cjmjywgu7000a1l3hmqti2i5o","_id":"cjmjywguv000n1l3h1ydi2s8o"},{"post_id":"cjmjywgug000d1l3h51646eoc","category_id":"cjmjywgu7000a1l3hmqti2i5o","_id":"cjmjywguw000p1l3h2ugappa1"},{"post_id":"cjmjywguk000h1l3hi3yo6viz","category_id":"cjmjywgu7000a1l3hmqti2i5o","_id":"cjmjywgux000s1l3hgusq41lf"},{"post_id":"cjmjywgu300061l3hy4mnnjy8","category_id":"cjmjywgu000041l3h9mplmcrj","_id":"cjmjywgux000u1l3hkwuw6rsq"},{"post_id":"cjmjywgu500081l3hgay1705c","category_id":"cjmjywgu7000a1l3hmqti2i5o","_id":"cjmjywguy000v1l3hn55bdvz8"},{"post_id":"cjmjywgu600091l3hmcefzea6","category_id":"cjmjywgu7000a1l3hmqti2i5o","_id":"cjmjywguz000x1l3h6tx2h6qs"}],"PostTag":[{"post_id":"cjmjywgtl00001l3hj47imp6f","tag_id":"cjmjywgu200051l3hvi28cq1x","_id":"cjmjywgum000i1l3h51i16v2r"},{"post_id":"cjmjywgtl00001l3hj47imp6f","tag_id":"cjmjywgu8000b1l3h8jse5qyv","_id":"cjmjywguu000k1l3hu8mh5gwy"},{"post_id":"cjmjywgts00021l3hksc9q49o","tag_id":"cjmjywgui000g1l3h08khw6as","_id":"cjmjywguw000o1l3h5b8fr6il"},{"post_id":"cjmjywgu300061l3hy4mnnjy8","tag_id":"cjmjywguv000m1l3hj0ehjsr3","_id":"cjmjywgux000t1l3hpra88zec"},{"post_id":"cjmjywgu500081l3hgay1705c","tag_id":"cjmjywgux000r1l3hpqfxoqc3","_id":"cjmjywguz000z1l3hi3e4e1bu"},{"post_id":"cjmjywgu500081l3hgay1705c","tag_id":"cjmjywguy000w1l3hbsc6s24i","_id":"cjmjywgv000101l3hhl4efgd7"},{"post_id":"cjmjywgu600091l3hmcefzea6","tag_id":"cjmjywgux000r1l3hpqfxoqc3","_id":"cjmjywgv000121l3h8b4bbchi"},{"post_id":"cjmjywgue000c1l3hrwak0k95","tag_id":"cjmjywgux000r1l3hpqfxoqc3","_id":"cjmjywgv100141l3hzjyz0kaf"},{"post_id":"cjmjywgug000d1l3h51646eoc","tag_id":"cjmjywgv100131l3hyzfoxyyd","_id":"cjmjywgv300171l3hhjavt63d"},{"post_id":"cjmjywgug000d1l3h51646eoc","tag_id":"cjmjywgv200151l3hi9cq7zq1","_id":"cjmjywgv400181l3hvyt9r6ds"},{"post_id":"cjmjywguk000h1l3hi3yo6viz","tag_id":"cjmjywgv300161l3hxxdipubr","_id":"cjmjywgv5001a1l3hvytg8ral"},{"post_id":"cjmjywguk000h1l3hi3yo6viz","tag_id":"cjmjywgv400191l3hygsbz6za","_id":"cjmjywgv5001b1l3hrya2ttn1"}],"Tag":[{"name":"科普","_id":"cjmjywgu200051l3hvi28cq1x"},{"name":"记录","_id":"cjmjywgu8000b1l3h8jse5qyv"},{"name":"数据挖掘","_id":"cjmjywgui000g1l3h08khw6as"},{"name":"心情","_id":"cjmjywguv000m1l3hj0ehjsr3"},{"name":"nodejs","_id":"cjmjywgux000r1l3hpqfxoqc3"},{"name":"hexo","_id":"cjmjywguy000w1l3hbsc6s24i"},{"name":"Python","_id":"cjmjywgv100131l3hyzfoxyyd"},{"name":"tkinter","_id":"cjmjywgv200151l3hi9cq7zq1"},{"name":"python","_id":"cjmjywgv300161l3hxxdipubr"},{"name":"gui","_id":"cjmjywgv400191l3hygsbz6za"}]}}